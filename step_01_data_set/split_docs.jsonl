{"content": "# Community Projects  \nWelcome to the Roo Code community section! Here you'll find community projects that extend Roo Code's capabilities and a gallery of custom modes shared by other users to enhance your development workflow.", "metadata": {"path": "community.md", "name": "community.md", "header1": "Community Projects"}}
{"content": "## Memory Bank Project by [@GreatScottyMac](https://github.com/GreatScottyMac)  \nThe [Roo Code Memory Bank](https://github.com/GreatScottyMac/roo-code-memory-bank) project solves a critical challenge in AI-assisted development: **maintaining context across sessions**. By providing a structured memory system integrated with VS Code, it ensures your AI assistant maintains a deep understanding of your project across sessions.  \n**Key Features**  \n- \ud83e\udde0 **Persistent Context**: Remembers project details across sessions and maintains consistent understanding of your codebase\n- \ud83d\udd04 **Smart Workflows**: Mode-based operation with automatic context switching and project-specific customization\n- \ud83d\udcca **Knowledge Management**: Structured documentation with technical decision tracking and automated progress monitoring  \nCheck out the [Memory Bank project on GitHub](https://github.com/GreatScottyMac/roo-code-memory-bank) to get started!", "metadata": {"path": "community.md", "name": "community.md", "header1": "Community Projects", "header2": "Memory Bank Project by [@GreatScottyMac](https://github.com/GreatScottyMac)"}}
{"content": "## Roo Code Tips & Tricks by [@Michaelzag](https://github.com/Michaelzag)  \n[Roo Code Tips & Tricks](https://github.com/Michaelzag/RooCode-Tips-Tricks) is a collection of files designed to supercharge your Roo Code experience and maximize productivity. For those looking for a memory management system: check out the [Handoff System](https://github.com/Michaelzag/RooCode-Tips-Tricks/blob/main/handoffs/handoff-system.md) which is a simple yet powerful way to maintain optimal LLM performance during extended projects while automatically creating valuable documentation.", "metadata": {"path": "community.md", "name": "community.md", "header1": "Community Projects", "header2": "Roo Code Tips & Tricks by [@Michaelzag](https://github.com/Michaelzag)"}}
{"content": "## Roo Code Dynamic Rules by [@cannuri](https://github.com/cannuri)  \nInspired by LangMem, this simple Rule allows you to define new rules and delete them on the fly simply by writing `RULE/NORULE: (your new rule)` in your message. Roo Code will then add it to or remove it from the `.clinerules` file. This way you can quickly define project specific rules on the fly and build them up step by step. Check out [Roo Code Dynamic Rules](https://github.com/cannuri/roo-code-dynamic-rules) on Github.", "metadata": {"path": "community.md", "name": "community.md", "header1": "Community Projects", "header2": "Roo Code Dynamic Rules by [@cannuri](https://github.com/cannuri)"}}
{"content": "## Custom Modes Gallery  \nShare and discover custom modes created by the community! Learn how to create and configure custom modes in the [Custom Modes documentation](advanced-usage/custom-modes). To add your own custom mode to the gallery, create a pull request from the \"Edit this page\" link below.  \n### Jest Test Engineer by [@mrubens](https://github.com/mrubens)  \nA specialized mode for writing and maintaining Jest test suites with TypeScript support. This mode is focused on TDD practices with built-in best practices for test organization, TypeScript-aware test writing, and restricted access to test-related files only.  \n```json\n{\n\"slug\": \"jest-test-engineer\",\n\"name\": \"Jest Test Engineer\",\n\"roleDefinition\": \"You are Roo, a Jest testing specialist with deep expertise in:\\n- Writing and maintaining Jest test suites\\n- Test-driven development (TDD) practices\\n- Mocking and stubbing with Jest\\n- Integration testing strategies\\n- TypeScript testing patterns\\n- Code coverage analysis\\n- Test performance optimization\\n\\nYour focus is on maintaining high test quality and coverage across the codebase, working primarily with:\\n- Test files in __tests__ directories\\n- Mock implementations in __mocks__\\n- Test utilities and helpers\\n- Jest configuration and setup\\n\\nYou ensure tests are:\\n- Well-structured and maintainable\\n- Following Jest best practices\\n- Properly typed with TypeScript\\n- Providing meaningful coverage\\n- Using appropriate mocking strategies\",\n\"groups\": [\n\"read\",\n\"browser\",\n\"command\",\n[\"edit\", {\n\"fileRegex\": \"(__tests__/.*|__mocks__/.*|\\\\.test\\\\.(ts|tsx|js|jsx)$|/test/.*|jest\\\\.config\\\\.(js|ts)$)\",\n\"description\": \"Test files, mocks, and Jest configuration\"\n}]\n],\n\"customInstructions\": \"When writing tests:\\n- Always use describe/it blocks for clear test organization\\n- Include meaningful test descriptions\\n- Use beforeEach/afterEach for proper test isolation\\n- Implement proper error cases\\n- Add JSDoc comments for complex test scenarios\\n- Ensure mocks are properly typed\\n- Verify both positive and negative test cases\"\n}\n```  \n### VibeMode by [@richardwhiteii](https://github.com/richardwhiteii)  \nA mode for transforming natural language descriptions into working code, embracing intuitive and flow-based development.  \n```json\n{\n\"slug\": \"vibemode\",\n\"name\": \"VibeMode\",\n\"roleDefinition\": \"You are Roo, a Vibe Coding assistant that transforms natural language descriptions into working code. You embrace the philosophy that coding should be intuitive and flow-based, where developers can 'give in to the vibes' and focus on what they want to build rather than how to build it.\\n\\nDescription: An AI coding partner focused on natural language programming and vibe-based development with continuous testing\\n\\nSystem Prompt: You are a Vibe Coding assistant that helps transform natural language descriptions into working code. Focus on understanding intent over technical specifics while ensuring functionality through continuous testing. Embrace experimentation and rapid iteration with built-in validation.\\n\\nGoals:\\n- Transform natural language descriptions into functional code\\n- Maintain flow state by handling technical details automatically\\n- Suggest improvements while preserving user intent\\n- Handle error resolution autonomously when possible\\n- Ensure code quality through continuous testing\\n- Validate each iteration before proceeding\\n\\nPrimary Responsibilities:\\n\\nNatural Language Programming\\n- Transform conversational descriptions into functional code\\n- Handle technical implementation details automatically\\n- Maintain creative flow by managing error resolution autonomously\\n- Suggest improvements while preserving user intent\\n- Generate appropriate tests for new functionality\\n\\nWorkflow Optimization\\n- Minimize keyboard interaction by supporting voice-to-text input\\n- Handle error messages through simple copy-paste resolution\\n- Maintain context across development sessions\\n- Switch to appropriate specialized modes when needed\\n- Run tests automatically after each significant change\\n- Provide immediate feedback on test results\\n\\nTest-Driven Development\\n- Create tests before implementing new features\\n- Validate changes through automated testing\\n- Maintain test coverage throughout development\\n- Flag potential issues early in the development cycle\\n- Ensure backwards compatibility with existing functionality\\n\\nPrompt Templates:\\n- Initialization: 'I want to create {description}'\\n- Refinement: 'Can you modify this to {change}'\\n- Error Handling: 'Fix this error: {error}'\\n- Iteration: 'Let's improve {aspect}'\\n- Test Creation: 'Generate tests for {feature}'\\n- Validation: 'Verify the changes to {component}'\",\n\"groups\": [\n\"read\",\n\"edit\",\n\"browser\",\n\"command\",\n\"mcp\"\n],\n\"customInstructions\": \"Prioritize working solutions over perfect code. Use error messages as learning opportunities. Maintain a conversational, encouraging tone. Suggest improvements without breaking flow. Document key decisions and assumptions. Focus on understanding intent over technical specifics. Embrace experimentation and rapid iteration. Switch to architect mode when structural changes are needed. Switch to ask mode when research is required. Switch to code mode when precise implementation is needed. Maintain context across mode transitions. Handle errors autonomously when possible. Preserve code context and conversation history. Support voice-to-text input through SuperWhisper integration. Generate and run tests for each new feature. Validate all changes through automated testing. Maintain test coverage throughout development. Provide immediate feedback on test results. Flag potential issues early in development cycle. Ensure backwards compatibility.\"\n}\n```  \n### Documentation Writer by [@jsonify](https://github.com/jsonify)  \nA mode that is specialized technical documentation expert, with access to read, edit, and command capabilities, focusing on creating clear, maintainable documentation while following best practices and consistent style guidelines.  \n```json\n{\n\"slug\": \"documentation-writer\",\n\"name\": \"Documentation Writer\",\n\"roleDefinition\": \"You are Roo, a technical documentation expert specializing in creating clear, comprehensive documentation for software projects. Your expertise includes:\\nWriting clear, concise technical documentation\\nCreating and maintaining README files, API documentation, and user guides\\nFollowing documentation best practices and style guides\\nUnderstanding code to accurately document its functionality\\nOrganizing documentation in a logical, easily navigable structure\",\n\"customInstructions\": \"Focus on creating documentation that is clear, concise, and follows a consistent style. Use Markdown formatting effectively, and ensure documentation is well-organized and easily maintainable.\",\n\"groups\": [\n\"read\",\n\"edit\",\n\"command\"\n]\n}\n```  \n### User Story Creator by [@jsonify](https://github.com/jsonify)  \nThis mode is an agile requirements specialist with structured templates for creating user stories, following a specific format that includes titles, user roles, goals, benefits, and detailed acceptance criteria, while considering various story types, edge cases, and technical implications.  \n```json\n{\n\"slug\": \"user-story-creator\",\n\"name\": \"User Story Creator\",\n\"roleDefinition\": \"You are Roo, an agile requirements specialist focused on creating clear, valuable user stories. Your expertise includes:\\n- Crafting well-structured user stories following the standard format\\n- Breaking down complex requirements into manageable stories\\n- Identifying acceptance criteria and edge cases\\n- Ensuring stories deliver business value\\n- Maintaining consistent story quality and granularity\",\n\"customInstructions\": \"Expected User Story Format:\\n\\nTitle: [Brief descriptive title]\\n\\nAs a [specific user role/persona],\\nI want to [clear action/goal],\\nSo that [tangible benefit/value].\\n\\nAcceptance Criteria:\\n1. [Criterion 1]\\n2. [Criterion 2]\\n3. [Criterion 3]\\n\\nStory Types to Consider:\\n- Functional Stories (user interactions and features)\\n- Non-functional Stories (performance, security, usability)\\n- Epic Breakdown Stories (smaller, manageable pieces)\\n- Technical Stories (architecture, infrastructure)\\n\\nEdge Cases and Considerations:\\n- Error scenarios\\n- Permission levels\\n- Data validation\\n- Performance requirements\\n- Security implications\",\n\"groups\": [\n\"read\",\n\"edit\",\n\"command\"\n]\n}\n```  \n### Junior Developer Code Reviewer by [@jsonify](https://github.com/jsonify)  \nThis mode is a supportive mentor-reviewer who provides educational, encouraging code reviews focused on junior developers' growth, combining positive reinforcement with detailed explanations of best practices, while having read and command access plus restricted edit capabilities for Markdown files only.  \n```json\n{\n\"slug\": \"junior-reviewer\",\n\"name\": \"Junior Dev Code Reviewer\",\n\"roleDefinition\": \"You are Roo, an experienced and supportive code reviewer focused on helping junior developers grow. Your reviews are educational, encouraging, and packed with learning opportunities.\\n\\nYour core principles are:\\n\\n1. EDUCATIONAL FOCUS\\n- Explain concepts thoroughly with clear examples\\n- Link to relevant documentation and learning resources\\n- Break down complex issues into digestible pieces\\n\\n2. POSITIVE REINFORCEMENT\\n- Acknowledge good practices and clever solutions\\n- Frame feedback as learning opportunities\\n- Encourage experimentation while ensuring code quality\\n\\n3. FUNDAMENTAL BEST PRACTICES\\n- Focus on coding standards and common patterns\\n- Explain the reasoning behind established practices\\n- Introduce design patterns gradually\\n\\n4. CLEAR EXAMPLES\\n- Provide before/after code samples\\n- Explain changes step by step\\n- Show alternative approaches when relevant\\n\\n5. STRUCTURED LEARNING\\n- Organize feedback by learning objective\\n- Build on previous review comments\\n- Include exercises and challenges when appropriate\",\n\"customInstructions\": \"When reviewing code:\\n1. Start with positive observations\\n2. Include detailed explanations with each suggestion\\n3. Link to relevant documentation\\n4. Provide clear, educational code examples\\n5. Use a supportive and encouraging tone\\n6. Focus on fundamental best practices\\n7. Create structured learning opportunities\\n8. Always explain the 'why' behind each suggestion\",\n\"groups\": [\n\"read\",\n[\n\"edit\",\n{\n\"fileRegex\": \"\\\\.(md)$\",\n\"description\": \"Markdown files for review output\"\n}\n],\n\"command\"\n]\n}\n```  \n### Senior Developer Code Reviewer by [@jsonify](https://github.com/jsonify)  \nThis mode is a technical architect who conducts high-level code reviews focused on architectural impact, system scalability, security vulnerabilities, performance optimizations, and long-term maintainability, while having read and command access plus restricted edit capabilities for Markdown files only.  \n```json\n{\n\"slug\": \"senior-reviewer\",\n\"name\": \"Senior Dev Code Reviewer\",\n\"roleDefinition\": \"You are Roo, a highly experienced technical architect providing strategic code review feedback focused on system-level implications and architectural decisions.\\n\\nYour core principles are:\\n\\n1. ARCHITECTURAL IMPACT\\n- Evaluate system-wide implications\\n- Identify potential scalability bottlenecks\\n- Assess technical debt implications\\n\\n2. PERFORMANCE & SECURITY\\n- Focus on critical performance optimizations\\n- Identify security vulnerabilities\\n- Consider resource utilization\\n\\n3. EDGE CASES & RELIABILITY\\n- Analyze error handling comprehensively\\n- Consider edge cases and failure modes\\n- Evaluate system resilience\\n\\n4. STRATEGIC IMPROVEMENTS\\n- Suggest architectural refactoring\\n- Identify technical debt\\n- Consider long-term maintainability\\n\\n5. TRADE-OFF ANALYSIS\\n- Discuss architectural trade-offs\\n- Consider alternative approaches\\n- Evaluate technical decisions\",\n\"customInstructions\": \"When reviewing code:\\n1. Focus on architectural and systemic implications\\n2. Evaluate performance and scalability concerns\\n3. Consider security implications\\n4. Analyze error handling and edge cases\\n5. Suggest strategic improvements\\n6. Discuss technical trade-offs\\n7. Be direct and concise\\n8. Think about long-term maintainability\",\n\"groups\": [\n\"read\",\n[\n\"edit\",\n{\n\"fileRegex\": \"\\\\.(md)$\",\n\"description\": \"Markdown files for review output\"\n}\n],\n\"command\"\n]\n}\n```", "metadata": {"path": "community.md", "name": "community.md", "header1": "Community Projects", "header2": "Custom Modes Gallery"}}
{"content": "# Tips & Tricks  \nA collection of quick tips to help you get the most out of Roo Code.  \n- Drag Roo Code to the [Secondary Sidebar](https://code.visualstudio.com/api/ux-guidelines/sidebars#secondary-sidebar) so you can see the Explorer, Search, Source Control, etc.\n- Once you have Roo Code in a separate sidebar from the file explorer, you can drag files from the explorer into the chat window (and even multiple at once). Just make sure to hold down the shift key after you start dragging the files.\n- If you're not using [MCP](/advanced-usage/mcp), turn it off in the <Codicon name=\"notebook\" /> Prompts tab to significantly cut down the size of the system prompt.\n- To keep your [custom modes](/advanced-usage/custom-modes) on track, limit the types of files that they're allowed to edit.\n- If you hit the dreaded `input length and max tokens exceed context limit` error, you can recover by deleting a message, rolling back to a previous checkpoint, or switching over to a model with a long context window like Gemini for a message.\n- In general, be thoughtful about your `Max Tokens` setting for thinking models. Every token you allocate to that takes away from space available to store conversation history. Consider only using high `Max Tokens` / `Max Thinking Tokens` settings with modes like Architect and Debug, and keeping Code mode at 16k max tokens or less.\n- If there's a real world job posting for something you want a custom mode to do, try asking Code mode to `Create a custom mode based on the job posting at @[url]`\n- If you want to really accelerate, check out multiple copies of your repository and run Roo Code on all of them in parallel (using git to resolve any conflicts, same as with human devs).\n- Add your own tips by clicking \"Edit this page\" below!", "metadata": {"path": "tips-and-tricks.md", "name": "tips-and-tricks.md", "header1": "Tips & Tricks"}}
{"content": "# Frequently Asked Questions  \nThis page answers some common questions about Roo Code.", "metadata": {"path": "faq.md", "name": "faq.md", "header1": "Frequently Asked Questions"}}
{"content": "## General  \n### What is Roo Code?  \nRoo Code is an AI-powered autonomous coding agent that lives in your editor.  \n### How does Roo Code work?  \nRoo Code uses large language models (LLMs) to understand your requests and translate them into actions.  It can:  \n*   Read and write files in your project.\n*   Execute commands in your VS Code terminal.\n*   Perform web browsing (if enabled).\n*   Use external tools via the Model Context Protocol (MCP).  \nYou interact with Roo Code through a chat interface, where you provide instructions and review/approve its proposed actions.  \n### What can Roo Code do?  \nRoo Code can help with a variety of coding tasks, including:  \n*   Generating code from natural language descriptions.\n*   Refactoring existing code.\n*   Fixing bugs.\n*   Writing documentation.\n*   Explaining code.\n*   Answering questions about your codebase.\n*   Automating repetitive tasks.\n*   Creating new files and projects.  \n### Is Roo Code free to use?  \nThe Roo Code extension itself is free and open-source. However, Roo Code relies on external API providers (like [Anthropic](providers/anthropic), [OpenAI](providers/openai), [OpenRouter](providers/openrouter), etc.) for its AI capabilities.  These providers typically charge for API usage based on the number of tokens processed.  You will need to create an account and obtain an API key from your chosen provider.  See [Setting Up Your First AI Provider](getting-started/connecting-api-provider) for details.  \n### What are the risks of using Roo Code?  \nRoo Code is a powerful tool, and it's important to use it responsibly.  Here are some things to keep in mind:  \n*   **Roo Code can make mistakes.**  Always review Roo Code's proposed changes carefully before approving them.\n*   **Roo Code can execute commands.**  Be very cautious about allowing Roo Code to run commands, especially if you're using auto-approval.\n*   **Roo Code can access the internet.** If you're using a provider that supports web browsing, be aware that Roo Code could potentially access sensitive information.", "metadata": {"path": "faq.md", "name": "faq.md", "header1": "Frequently Asked Questions", "header2": "General"}}
{"content": "## Setup & Installation  \n### How do I install Roo Code?  \nSee the [Installation Guide](getting-started/installing) for detailed instructions.  \n### Which API providers are supported?  \nRoo Code supports a wide range of API providers, including:  \n*   [Anthropic (Claude)](/providers/anthropic)\n*   [OpenAI](/providers/openai)\n*   [OpenRouter](/providers/openrouter)\n*   [Google Gemini](/providers/gemini)\n*   [Glama](/providers/glama)\n*   [AWS Bedrock](/providers/bedrock)\n*   [GCP Vertex AI](/providers/vertex)\n*   [Ollama](/providers/ollama)\n*   [LM Studio](/providers/lmstudio)\n*   [DeepSeek](/providers/deepseek)\n*   [Mistral](/providers/mistral)\n*   [Unbound](/providers/unbound)\n*   [Requesty](/providers/requesty)\n*   [VS Code Language Model API](/providers/vscode-lm)  \n### How do I get an API key?  \nEach API provider has its own process for obtaining an API key.  See the [Setting Up Your First AI Provider](/getting-started/connecting-api-provider) for links to the relevant documentation for each provider.  \n### Can I use Roo Code with local models?  \nYes, Roo Code supports running models locally using [Ollama](/providers/ollama) and [LM Studio](/providers/lmstudio).  See [Using Local Models](/advanced-usage/local-models) for instructions.", "metadata": {"path": "faq.md", "name": "faq.md", "header1": "Frequently Asked Questions", "header2": "Setup & Installation"}}
{"content": "## Usage  \n### How do I start a new task?  \nOpen the Roo Code panel (<Codicon name=\"rocket\" />) and type your task in the chat box. Be clear and specific about what you want Roo Code to do. See [Typing Your Requests](/basic-usage/typing-your-requests) for best practices.  \n### What are modes in Roo Code?  \n[Modes](/basic-usage/modes) are different personas that Roo Code can adopt, each with a specific focus and set of capabilities. The built-in modes are:  \n*   **Code:** For general-purpose coding tasks.\n*   **Architect:** For planning and technical leadership.\n*   **Ask:** For answering questions and providing information.\n*   **Debug:** For systematic problem diagnosis.  \nYou can also create [Custom Modes](/advanced-usage/custom-modes).  \n### How do I switch between modes?  \nUse the dropdown menu in the chat input area to select a different mode, or use the `/` command to switch to a specific mode.  \n### What are tools and how do I use them?  \n[Tools](/basic-usage/using-tools) are how Roo Code interacts with your system.  Roo Code automatically selects and uses the appropriate tools to complete your tasks. You don't need to call tools directly. You will be prompted to approve or reject each tool use.  \n### What are context mentions?  \n[Context mentions](/basic-usage/context-mentions) are a way to provide Roo Code with specific information about your project, such as files, folders, or problems. Use the \"@\" symbol followed by the item you want to mention (e.g., `@/src/file.ts`, `@problems`).  \n### Can Roo Code access the internet?  \nYes, if you are using a provider with a model that support web browsing. Be mindful of the security implications of allowing this.  \n### Can Roo Code run commands in my terminal?  \nYes, Roo Code can execute commands in your VS Code terminal.  You will be prompted to approve each command before it's executed, unless you've enabled auto-approval for commands. Be extremely cautious about auto-approving commands. If you're experiencing issues with terminal commands, see the [Shell Integration Guide](troubleshooting/shell-integration) for troubleshooting.  \n### How do I provide feedback to Roo Code?  \nYou can provide feedback by approving or rejecting Roo Code's proposed actions. You can provide additional feedback by using the feedback field.  \n### Can I customize Roo Code's behavior?  \nYes, you can customize Roo Code in several ways:  \n*   **Custom Instructions:** Provide general instructions that apply to all modes, or mode-specific instructions.\n*   **Custom Modes:** Create your own modes with tailored prompts and tool permissions.\n*   **`.clinerules` Files:** Create `.clinerules` files in your project to provide additional guidelines.\n*   **Settings:** Adjust various settings, such as auto-approval, diff editing, and more.  \n### Does Roo Code have any auto approval settings?\nYes, Roo Code has a few settings that when enabled will automatically approve actions. Find out more [here](/advanced-usage/auto-approving-actions).", "metadata": {"path": "faq.md", "name": "faq.md", "header1": "Frequently Asked Questions", "header2": "Usage"}}
{"content": "## Advanced Features  \n### Can I use Roo offline?\nYes, if you use a [local model](/advanced-usage/local-models).  \n### What is MCP (Model Context Protocol)?  \n[MCP](/advanced-usage/mcp) is a protocol that allows Roo Code to communicate with external servers, extending its capabilities with custom tools and resources.  \n### Can I create my own MCP servers?  \nYes, you can create your own MCP servers to add custom functionality to Roo Code. See the [MCP documentation](https://github.com/modelcontextprotocol) for details.", "metadata": {"path": "faq.md", "name": "faq.md", "header1": "Frequently Asked Questions", "header2": "Advanced Features"}}
{"content": "## Troubleshooting  \n### Roo Code isn't responding. What should I do?  \n*   Make sure your API key is correct and hasn't expired.\n*   Check your internet connection.\n*   Check the status of your chosen API provider.\n*   Try restarting VS Code.\n*   If the problem persists, report the issue on [GitHub](https://github.com/RooVetGit/Roo-Code/issues) or [Discord](https://discord.gg/roocode).  \n### I'm seeing an error message. What does it mean?  \nThe error message should provide some information about the problem. If you're unsure how to resolve it, seek help in the community forums.  \n### Roo Code made changes I didn't want. How do I undo them?  \nRoo Code uses VS Code's built-in file editing capabilities.  You can use the standard \"Undo\" command (Ctrl/Cmd + Z) to revert changes. Also, if experimental checkpoints are enabled, Roo can revert changes made to a file.  \n### How do I report a bug or suggest a feature?  \nPlease report bugs or suggest features on the Roo Code [Issues page](https://github.com/RooVetGit/Roo-Code/issues) and [Feature Requests page](https://github.com/RooVetGit/Roo-Code/discussions/categories/feature-requests?discussions_q=is%3Aopen+category%3A%22Feature+Requests%22+sort%3Atop).", "metadata": {"path": "faq.md", "name": "faq.md", "header1": "Frequently Asked Questions", "header2": "Troubleshooting"}}
{"content": "---\nsidebar_label: Welcome\n---", "metadata": {"path": "index.md", "name": "index.md"}}
{"content": "# Roo Code Docs  \nRoo Code (formerly Roo Cline) is an AI-powered autonomous coding agent that lives in your editor. It helps you code faster and smarter, whether you're starting a new project, maintaining existing code, or learning new technologies.", "metadata": {"path": "index.md", "name": "index.md", "header1": "Roo Code Docs"}}
{"content": "## What Can Roo Code Do?  \n- \ud83d\ude80 **Generate Code** from natural language descriptions\n- \ud83d\udd27 **Refactor & Debug** existing code\n- \ud83d\udcdd **Write & Update** documentation\n- \ud83e\udd14 **Answer Questions** about your codebase\n- \ud83d\udd04 **Automate** repetitive tasks\n- \ud83c\udfd7\ufe0f **Create** new files and projects", "metadata": {"path": "index.md", "name": "index.md", "header1": "Roo Code Docs", "header2": "What Can Roo Code Do?"}}
{"content": "## Quick Start  \n1. [Install Roo Code](getting-started/installing)\n2. [Connect Your AI Provider](getting-started/connecting-api-provider)\n3. [Try Your First Task](getting-started/your-first-task)", "metadata": {"path": "index.md", "name": "index.md", "header1": "Roo Code Docs", "header2": "Quick Start"}}
{"content": "## Key Features  \n### Multiple Modes\nRoo Code adapts to your needs with specialized [modes](basic-usage/modes):\n- **Code Mode:** For general-purpose coding tasks\n- **Architect Mode:** For planning and technical leadership\n- **Ask Mode:** For answering questions and providing information\n- **Debug Mode:** For systematic problem diagnosis\n- **[Custom Modes](advanced-usage/custom-modes):** Create unlimited specialized personas for security auditing, performance optimization, documentation, or any other task  \n### Smart Tools\nRoo Code comes with powerful [tools](basic-usage/using-tools) that can:\n- Read and write files in your project\n- Execute commands in your VS Code terminal\n- Control a web browser\n- Use external tools via [MCP (Model Context Protocol)](advanced-usage/mcp)  \nMCP extends Roo Code's capabilities by allowing you to add unlimited custom tools. Integrate with external APIs, connect to databases, or create specialized development tools - MCP provides the framework to expand Roo Code's functionality to meet your specific needs.  \n### Customization\nMake Roo Code work your way with:\n- [Custom Instructions](advanced-usage/custom-instructions) for personalized behavior\n- [Custom Modes](advanced-usage/custom-modes) for specialized tasks\n- [Local Models](advanced-usage/local-models) for offline use\n- [Auto-Approval Settings](advanced-usage/auto-approving-actions) for faster workflows", "metadata": {"path": "index.md", "name": "index.md", "header1": "Roo Code Docs", "header2": "Key Features"}}
{"content": "## Resources  \n### Documentation\n- [Basic Usage Guide](basic-usage/the-chat-interface)\n- [Advanced Features](advanced-usage/auto-approving-actions)\n- [Frequently Asked Questions](faq)  \n### Community\n- **Discord:** [Join our Discord server](https://discord.gg/roocode) for real-time help and discussions\n- **Reddit:** [Visit our subreddit](https://www.reddit.com/r/RooCode) to share experiences and tips\n- **GitHub:** Report [issues](https://github.com/RooVetGit/Roo-Code/issues) or request [features](https://github.com/RooVetGit/Roo-Code/discussions/categories/feature-requests?discussions_q=is%3Aopen+category%3A%22Feature+Requests%22+sort%3Atop)  \nReady to get started? Click the **Next** button below to begin your journey with Roo Code!", "metadata": {"path": "index.md", "name": "index.md", "header1": "Roo Code Docs", "header2": "Resources"}}
{"content": "{\n\"videos\": [\n{\n\"id\": \"mwJx5QI2c0o\",\n\"title\": \"You\u2019re Overpaying for AI Coding | Roo Code System Prompt Override\"\n},\n{\n\"id\": \"fu93FmBnv4Y\",\n\"title\": \"RooCode (New Upgrades) + 3.7 Sonnet: The NEW POWER-STEERING MODE, DEBUG MODE & More is AMAZING!\"\n},\n{\n\"id\": \"Y9JoWcyp0FY\",\n\"title\": \"PERFECT VSCode Setup: Sonnet 3.7 + Roo-Code (15X Faster Coding!)\"\n},\n{\n\"id\": \"r5T3h0BOiWw\",\n\"title\": \"Roo Code is AMAZING - AI VSCode Extension (better than Cursor?)\"\n},\n{\n\"id\": \"IzjdJfvfnfM\",\n\"title\": \"Is Roo Code the Ultimate Coding Hack?\"\n},\n{\n\"id\": \"PE-0P6SAZYc\",\n\"title\": \"RooCode v3.3 UPDATE: Fully FREE Autonomous AI Coding Agent! (FREE API, Checkpoints, Markdown)\"\n},\n{\n\"id\": \"rg_g3BPv4uQ\",\n\"title\": \"5 Must-Know Roo Code Features That Make It Better Than Cline (Save 50% on Tokens!)\"\n},\n{\n\"id\": \"9p_1OISs7o0\",\n\"title\": \"RooCode (Upgraded): I'm FINALLY SWITCHING AWAY from CLINE! This is the MOST CUSTOMIZABLE AI Coder!\"\n},\n{\n\"id\": \"2Frayo_8ovQ\",\n\"title\": \"Deepseek-R1 + RooCode: BEST AI Coding Agent! Develop a Full-stack App Without Writing ANY Code!\"\n},\n{\n\"id\": \"KsUjPlRPsPc\",\n\"title\": \"Roo-Cline 3.1: Code Faster Than Ever with This Game-Changing Update\"\n},\n{\n\"id\": \"r-cbg5ON60Q\",\n\"title\": \"Setting Up RooCline With LMStudio and Ollama Phi4\"\n},\n{\n\"id\": \"V5ZdznleO6s\",\n\"title\": \"Build a Web App with Roo Cline & Claude 3.5 Sonnet\"\n},\n{\n\"id\": \"IVTcZYg_ylI\",\n\"title\": \"RooCline: The Cline Fork That's Faster, Smarter, and Better!\"\n},\n{\n\"id\": \"a5mCvQoDB2g\",\n\"title\": \"FREE AI Coder Beats Cursor & Bolt.New?\"\n},\n{\n\"id\": \"9I_xjb30WHg\",\n\"title\": \"Roo-Cline is Cline but Better | AI in Large Codebases\"\n}\n]\n}", "metadata": {"path": "tutorial-videos.json", "name": "tutorial-videos.json"}}
{"content": "import VideoGrid from '@site/src/components/VideoGrid';", "metadata": {"path": "tutorial-videos.mdx", "name": "tutorial-videos.mdx"}}
{"content": "# Tutorial Videos  \nLearn how to build powerful applications and enhance your development workflow with these hands-on Roo Code tutorials. Big thanks to all of the creators!  \n<VideoGrid />", "metadata": {"path": "tutorial-videos.mdx", "name": "tutorial-videos.mdx", "header1": "Tutorial Videos"}}
{"content": "# Using Tools  \nRoo Code has a set of built-in tools that it can use to interact with your code, files, and environment.  These tools allow Roo Code to perform actions like:  \n*   Reading and writing files\n*   Executing commands in the terminal\n*   Searching your codebase\n*   Accessing information from the web (with browser support enabled)  \nYou don't need to *tell* Roo Code which tool to use.  Just describe your task in plain English, and Roo Code will determine the appropriate tool (or sequence of tools) to use.  You will always have the opportunity to approve or reject each tool use.", "metadata": {"path": "basic-usage/using-tools.md", "name": "using-tools.md", "header1": "Using Tools"}}
{"content": "## Available Tools  \nHere's a brief overview of the core tools available in Roo Code:  \n| Tool                        | Description                                                                  |\n| :---------------------------| :----------------------------------------------------------------------------|\n| `read_file`                 | Reads the content of a file.                                                 |\n| `write_to_file`             | Creates a new file or overwrites an existing file with the provided content. |\n| `apply_diff`                | Applies a set of changes (a \"diff\") to an existing file.                     |\n| `execute_command`           | Runs a command in the VS Code terminal.                                      |\n| `search_files`              | Searches for text or a regular expression within files in a directory.       |\n| `list_files`                | Lists the files and directories within a given directory.                    |\n| `list_code_definition_names`| Lists code definitions like class names.                                     |\n| `browser_action`            | Performs actions in a headless browser (if enabled).                         |\n| `ask_followup_question`     | Asks you a clarifying question.                                              |\n| `attempt_completion`        | Indicates that Roo Code believes the task is complete.                       |  \n**Note:**  The availability of some tools may depend on the current [mode](./modes.md) and your settings.", "metadata": {"path": "basic-usage/using-tools.md", "name": "using-tools.md", "header1": "Using Tools", "header2": "Available Tools"}}
{"content": "## How Tools are Used  \n1.  **You describe your task:**  You tell Roo Code what you want to achieve in the chat input.\n2.  **Roo Code proposes a tool:**  Roo Code analyzes your request and determines which tool (or sequence of tools) is most appropriate.\n3.  **You review and approve:** Roo Code presents the proposed tool use, including the tool name and any parameters (like the file path or command to execute).  You can review this proposal and either **Approve** or **Reject** it.\n4.  **Roo Code executes the tool (if approved):** If you approve, Roo Code executes the tool and shows you the result.\n5.  **Iteration:**  Roo Code may use multiple tools in sequence to complete a task, waiting for your approval after each step.", "metadata": {"path": "basic-usage/using-tools.md", "name": "using-tools.md", "header1": "Using Tools", "header2": "How Tools are Used"}}
{"content": "## Example  \nLet's say you want to create a new file named `hello.txt` with the content \"Hello, world!\".  The interaction might look like this:  \n**You:** Create a file named `hello.txt` with the content \"Hello, world!\".  \n**Roo Code:** (Proposes to use the `write_to_file` tool)  \n```xml\n<write_to_file>\n<path>hello.txt</path>\n<content>\nHello, world!\n</content>\n</write_to_file>\n```  \n**You:** (Click \"Approve\")  \n**Roo Code:** (Confirms that the file was created)", "metadata": {"path": "basic-usage/using-tools.md", "name": "using-tools.md", "header1": "Using Tools", "header2": "Example"}}
{"content": "## Important Considerations  \n*   Always review proposed actions carefully.  Even though Roo Code is designed to be helpful, it's still an AI, and it can make mistakes.\n*   Start with small tasks.  Get comfortable with Roo Code's behavior before giving it more complex instructions.\n*   Use context mentions.  Provide clear context using @ mentions (e.g., @/src/file.ts) to help Roo Code understand your request.\n*   Use custom instructions.  Guide Roo's behavior even more with custom instructions, or change the prompt using different modes", "metadata": {"path": "basic-usage/using-tools.md", "name": "using-tools.md", "header1": "Using Tools", "header2": "Important Considerations"}}
{"content": "## Advanced Tool Usage  \nRoo Code can be extended with additional tools using the Model Context Protocol (MCP). See the [MCP](../advanced-usage/mcp) section for more details. You can also create [Custom Modes](../advanced-usage/custom-modes) with restricted tool access for enhanced safety and control.", "metadata": {"path": "basic-usage/using-tools.md", "name": "using-tools.md", "header1": "Using Tools", "header2": "Advanced Tool Usage"}}
{"content": "# Context Mentions  \nContext mentions are a powerful way to provide Roo Code with specific information about your project, allowing it to perform tasks more accurately and efficiently.  You can use mentions to refer to files, folders, problems, and Git commits.  Context mentions start with the `@` symbol.", "metadata": {"path": "basic-usage/context-mentions.md", "name": "context-mentions.md", "header1": "Context Mentions"}}
{"content": "## Types of Mentions  \n### File Mentions (`@/path/to/file.ts`)  \nUse file mentions to include the contents of a specific file in your request.  \n*   **Example:** \"Explain the function `calculateTotal` in the file @/src/utils.ts.\"\n*   **How it works:** Roo Code will read the contents of the specified file and include it in the context sent to the AI model.\n* **Best Practices**: Always include the `/` to tell Roo you're specifying a file path.\n* **Note:** You can use the `@` character in any chat field, so you may use it while also providing feedback.  \n### Folder Mentions (`@/path/to/folder/`)  \nUse folder mentions to refer to a directory.  Roo Code will be able to use the *names* of the files and subdirectories within that folder.  \n*   **Example:** \"What files are in the @/src/components/ folder?\"\n* **Note**: To find files inside of that folder, you will need to ask Roo to use one of its tools, `list files`.  \n### Problems Mention (`@problems`)  \nUse the `@problems` mention to include a list of all current errors and warnings from the VS Code Problems panel in your request.  \n*   **Example:** \"@problems Fix all errors in the current file.\"\n* **Note:** This is especially useful when you see errors in the Problems panel and want Roo Code to address them.  \n### Terminal Mention (`@terminal`)  \nUse the `@terminal` mention to include the last command run in the terminal along with its output.  \n*   **Example:** \"Fix the warnings in the @terminal.\"  \n### Git Commit Mentions (`@a1b2c3d`)  \nUse a Git commit hash (short or long) to include information about a specific commit.  \n*   **Example:** \"What changes were made in commit @a1b2c3d?\"\n* **Note:** Roo Code will include the commit message, author, date, and a diff of the changes.  \nIf you want to refer to the working changes in the git repository, you can use the `@git-changes` mention.  \n*   **Example:** \"Can you propose a commit message for @git-changes?\"  \n### URL Mentions (`@https://example.com`)  \nUse a URL to have Roo Code fetch and include the content of a website.  \n*   **Example:** \"Summarize the content of @https://docusaurus.io/.\"\n*   **Note:** Roo Code will convert the website content to Markdown.", "metadata": {"path": "basic-usage/context-mentions.md", "name": "context-mentions.md", "header1": "Context Mentions", "header2": "Types of Mentions"}}
{"content": "## Using Mentions  \n*   **Type `@`:** Start typing `@` in the chat input field.  A dropdown menu will appear with suggestions.\n*   **Select a Mention:** Use the arrow keys or your mouse to select the desired mention from the dropdown, and press Enter or click to insert it.\n*   **Type to Search:** As you type after the `@` symbol, the suggestions will be filtered.\n* **Multiple Mentions:** You can include multiple mentions in a single message.\n*   **Combine with Text:** You can combine mentions with regular text to create your request.  For example: \"Check the function in @/src/utils.ts and fix any @problems\".", "metadata": {"path": "basic-usage/context-mentions.md", "name": "context-mentions.md", "header1": "Context Mentions", "header2": "Using Mentions"}}
{"content": "## Tips  \n*   **Be Specific:** The more specific your mentions are, the better Roo Code will understand your request.\n*   **Use Relative Paths:** When referring to files within your workspace, use paths relative to the workspace root.\n*   **Check for Typos:** Make sure the file paths and commit hashes are correct.  \nContext mentions are a powerful tool for providing Roo Code with the information it needs to complete your tasks effectively.  Experiment with different types of mentions to see how they can improve your workflow.", "metadata": {"path": "basic-usage/context-mentions.md", "name": "context-mentions.md", "header1": "Context Mentions", "header2": "Tips"}}
{"content": "# Typing Your Requests  \nRoo Code is designed to understand natural language.  You don't need to use any special commands or syntax to communicate with it.  Just type your request in plain English, as if you were talking to a human developer.", "metadata": {"path": "basic-usage/typing-your-requests.md", "name": "typing-your-requests.md", "header1": "Typing Your Requests"}}
{"content": "## Best Practices  \n*   **Be Clear and Specific:**  Clearly state what you want Roo Code to do.  Avoid vague or ambiguous language.  For example, instead of saying \"Fix the code,\" say \"Fix the bug in the `calculateTotal` function that causes it to return incorrect results.\"\n*   **Provide Context:**  If your request refers to specific files, functions, or parts of your code, use [Context Mentions](./context-mentions) to provide that context.\n*   **Break Down Complex Tasks:**  For large or complex tasks, break them down into smaller, more manageable steps.  Roo Code works best when given focused instructions.\n*   **Use Examples:** If you want Roo Code to generate code in a specific style, provide examples.", "metadata": {"path": "basic-usage/typing-your-requests.md", "name": "typing-your-requests.md", "header1": "Typing Your Requests", "header2": "Best Practices"}}
{"content": "## Examples  \nHere are some examples of well-formed requests:  \n*   \"Create a new file named `utils.py` and add a function called `add` that takes two numbers as arguments and returns their sum.\"\n*   \"In the file `src/components/Button.tsx`, change the color of the button to blue.\"\n*   \"Find all instances of the variable `oldValue` in the file `/src/App.js` and replace them with `newValue`.\"\n*   \"Run the command `npm install` in the terminal.\"\n*   \"Explain the function `calculateTotal` in the file `/src/utils.ts`.\"\n* \"@problems Address all detected problems.\"", "metadata": {"path": "basic-usage/typing-your-requests.md", "name": "typing-your-requests.md", "header1": "Typing Your Requests", "header2": "Examples"}}
{"content": "## What *Not* to Do  \n*   **Don't be vague:** Avoid requests like \"Fix the code\" or \"Make it better.\"\n*   **Don't assume Roo Code knows what you're thinking:** Provide all necessary context.\n*   **Don't use jargon unnecessarily:** Use plain English whenever possible.\n*   **Don't give multiple unrelated instructions in a single request:** Break down complex tasks into smaller steps.\n*   **Don't assume a request was successful:** Always wait for confirmation from Roo Code after each tool use.", "metadata": {"path": "basic-usage/typing-your-requests.md", "name": "typing-your-requests.md", "header1": "Typing Your Requests", "header2": "What *Not* to Do"}}
{"content": "# Using Modes  \nRoo Code offers different \"modes\" to tailor its behavior and capabilities to specific tasks. Think of modes as different personas or roles that Roo Code can adopt. Each mode has a specific focus, and some modes have restrictions on the tools they can use.  This helps to ensure that Roo Code stays on task and avoids unintended actions.", "metadata": {"path": "basic-usage/modes.md", "name": "modes.md", "header1": "Using Modes"}}
{"content": "## Built-in Modes  \nRoo Code comes with four built-in modes:  \n*   **Code Mode (Default):** This is the general-purpose coding mode.  Roo Code can read, write, and execute code in this mode. It's designed for tasks like creating new features, refactoring existing code, and fixing bugs.  \n*   **Architect Mode:** This mode is for high-level planning and design discussions. Roo Code can read files in this mode, but it *cannot* write to files or execute commands. Use this mode to discuss system architecture, design patterns, or overall project structure.  \n*   **Ask Mode:** This mode is for asking questions and getting explanations. Roo Code can read files, access external resources, but it *cannot* modify files or run commands. Use this mode to understand code, explore concepts, or get help with specific problems. You can use this mode to learn more about new or existing code.  \n*   **Debug Mode:** This mode is specifically designed for systematic problem diagnosis. It uses a structured approach where Roo Code first analyzes potential causes, narrows down the most likely explanations, and validates them through strategic logging before implementing fixes. This methodical process helps ensure more accurate bug fixes.", "metadata": {"path": "basic-usage/modes.md", "name": "modes.md", "header1": "Using Modes", "header2": "Built-in Modes"}}
{"content": "## Why Use Modes?  \nModes help to:  \n*   **Focus Roo Code's responses:**  Each mode has a specific \"role definition\" and instructions that guide its behavior.\n*   **Improve safety:**  Modes like Architect and Ask restrict Roo Code's ability to modify files or run commands, reducing the risk of unintended changes.\n*   **Optimize for different tasks:**  The Code mode is designed for active coding, while the Architect mode is better for planning, and the Ask mode is best for understanding.", "metadata": {"path": "basic-usage/modes.md", "name": "modes.md", "header1": "Using Modes", "header2": "Why Use Modes?"}}
{"content": "## Switching Modes  \nYou can switch between modes using the dropdown menu in the chat input area:  \n1.  **Locate the Dropdown:**  Find the dropdown menu to the left of the chat input box. It will usually display the name of the current mode (e.g., \"Code\", \"Architect\", \"Ask\", \"Debug\").  \n2.  **Select a Mode:** Click the dropdown and choose the mode you want to use.  \nRoo Code will remember the last used API configuration for each mode, making it easy to switch between different providers or models for different tasks.  \nHint: You can also use the `/` command to switch modes.  For example, `/architect` will switch to Architect Mode.", "metadata": {"path": "basic-usage/modes.md", "name": "modes.md", "header1": "Using Modes", "header2": "Switching Modes"}}
{"content": "## Custom Modes  \nRoo Code also allows you to create your own custom modes, with tailored instructions and tool permissions.  See the [Advanced Usage: Custom Modes](./../advanced-usage/custom-modes) section for more information.", "metadata": {"path": "basic-usage/modes.md", "name": "modes.md", "header1": "Using Modes", "header2": "Custom Modes"}}
{"content": "## Tips  \n*   Start in **Code Mode** for most coding tasks.\n*   Switch to **Architect Mode** when planning or discussing high-level design.\n*   Use **Ask Mode** when you need to understand code or concepts.\n*   Switch to **Debug Mode** when tracking down bugs.\n*   Create **Custom Modes** to optimize Roo Code for your own project and workflows.\n*   Experiment with different modes to find what works best!", "metadata": {"path": "basic-usage/modes.md", "name": "modes.md", "header1": "Using Modes", "header2": "Tips"}}
{"content": "# The Chat Interface  \nThe Roo Code chat interface is your primary way of interacting with it. It's located in the Roo Code panel, which you can open by clicking the Roo Code icon (<Codicon name=\"rocket\" />) in the VS Code Activity Bar.", "metadata": {"path": "basic-usage/the-chat-interface.md", "name": "the-chat-interface.md", "header1": "The Chat Interface"}}
{"content": "## Components of the Chat Interface  \nThe chat interface consists of the following main elements:  \n1.  **Chat History:** This area displays the conversation history between you and Roo Code.  It shows your requests, Roo Code's responses, and any actions taken (like file edits or command executions).  \n2.  **Input Field:** This is where you type your tasks and questions for Roo Code.  You can use plain English to communicate.  \n3.  **Action Buttons:** These buttons appear below the input field and allow you to approve or reject Roo Code's proposed actions.  The available buttons change depending on the context.  \n4. **Send Button:** This looks like a small plane and it's located to the far right of the input field. This sends messages to Roo after you've typed them.  \n5. **Plus Button:** The plus button is located at the top in the header, and it resets the current session.  \n6. **Settings Button:** The settings button is a gear, and it's used for opening the settings to customize features or behavior.  \n7. **Mode Selector:** The mode selector is a dropdown located to the left of the chat input field. It is used for selecting which mode Roo should use for your tasks.", "metadata": {"path": "basic-usage/the-chat-interface.md", "name": "the-chat-interface.md", "header1": "The Chat Interface", "header2": "Components of the Chat Interface"}}
{"content": "## Interacting with Messages  \n*   **Clickable Links:** File paths, URLs, and other mentions in the chat history are clickable.  Clicking a file path will open the file in the editor.  Clicking a URL will open it in your default browser.\n*   **Copying Text:** You can copy text from the chat history by selecting it and using the standard copy command (Ctrl/Cmd + C).  Some elements, like code blocks, have a dedicated \"Copy\" button.\n* **Expanding and Collapsing**: Click on a message to expand or collapse it.", "metadata": {"path": "basic-usage/the-chat-interface.md", "name": "the-chat-interface.md", "header1": "The Chat Interface", "header2": "Interacting with Messages"}}
{"content": "## Status Indicators  \n*   **Loading Spinner:**  When Roo Code is processing a request, you'll see a loading spinner.\n*   **Error Messages:**  If an error occurs, a red error message will be displayed.\n*   **Success Messages:** Green messages indicate successful completion of actions.", "metadata": {"path": "basic-usage/the-chat-interface.md", "name": "the-chat-interface.md", "header1": "The Chat Interface", "header2": "Status Indicators"}}
{"content": "---\nsidebar_label: Requesty\n---", "metadata": {"path": "providers/requesty.md", "name": "requesty.md"}}
{"content": "# Using Requesty With Roo Code  \nRoo Code supports accessing models through the [Requesty](https://www.requesty.ai/) AI platform. Requesty provides a unified API for interacting with various large language models (LLMs), including those from Anthropic and OpenAI, and offers features for testing, deploying, and monitoring LLM applications.  It's designed to simplify the process of integrating AI into applications.  \n**Website:** [https://www.requesty.ai/](https://www.requesty.ai/)", "metadata": {"path": "providers/requesty.md", "name": "requesty.md", "header1": "Using Requesty With Roo Code"}}
{"content": "## Getting an API Key  \n1.  **Sign Up/Sign In:** Go to the [Requesty website](https://www.requesty.ai/) and create an account or sign in.\n2.  **Get API Key:**  You can get an API key from the [API Management ](https://app.requesty.ai/manage-api) section of your Requesty dashboard.", "metadata": {"path": "providers/requesty.md", "name": "requesty.md", "header1": "Using Requesty With Roo Code", "header2": "Getting an API Key"}}
{"content": "## Supported Models  \nRequesty provides access to a wide range of models.  Roo Code will automatically fetch the latest list of available models. You can see the full list of available models on the [Model List](https://app.requesty.ai/router/list) page.", "metadata": {"path": "providers/requesty.md", "name": "requesty.md", "header1": "Using Requesty With Roo Code", "header2": "Supported Models"}}
{"content": "## Configuration in Roo Code  \n1.  **Open Roo Code Settings:** Click the gear icon (<Codicon name=\"gear\" />) in the Roo Code panel.\n2.  **Select Provider:** Choose \"Requesty\" from the \"API Provider\" dropdown.\n3.  **Enter API Key:** Paste your Requesty API key into the \"Requesty API Key\" field.\n4.  **Select Model:** Choose your desired model from the \"Model\" dropdown.", "metadata": {"path": "providers/requesty.md", "name": "requesty.md", "header1": "Using Requesty With Roo Code", "header2": "Configuration in Roo Code"}}
{"content": "---\nsidebar_label: Anthropic\n---", "metadata": {"path": "providers/anthropic.md", "name": "anthropic.md"}}
{"content": "# Using Anthropic With Roo Code  \nAnthropic is an AI safety and research company that builds reliable, interpretable, and steerable AI systems.  Their Claude models are known for their strong reasoning abilities, helpfulness, and honesty.  \n**Website:** [https://www.anthropic.com/](https://www.anthropic.com/)", "metadata": {"path": "providers/anthropic.md", "name": "anthropic.md", "header1": "Using Anthropic With Roo Code"}}
{"content": "## Getting an API Key  \n1.  **Sign Up/Sign In:** Go to the [Anthropic Console](https://console.anthropic.com/). Create an account or sign in.\n2.  **Navigate to API Keys:**  Go to the [API keys](https://console.anthropic.com/settings/keys) section.\n3.  **Create a Key:** Click \"Create Key\". Give your key a descriptive name (e.g., \"Roo Code\").\n4.  **Copy the Key:**  **Important:** Copy the API key *immediately*.  You will not be able to see it again.  Store it securely.", "metadata": {"path": "providers/anthropic.md", "name": "anthropic.md", "header1": "Using Anthropic With Roo Code", "header2": "Getting an API Key"}}
{"content": "## Supported Models  \nRoo Code supports the following Anthropic Claude models:  \n*   `claude-3-5-sonnet-20241022` (Recommended)\n*`claude-3-5-haiku-20241022`\n*   `claude-3-opus-20240229`\n*   `claude-3-haiku-20240307`  \nSee [Anthropic's Model Documentation](https://docs.anthropic.com/en/docs/about-claude/models) for more details on each model's capabilities.", "metadata": {"path": "providers/anthropic.md", "name": "anthropic.md", "header1": "Using Anthropic With Roo Code", "header2": "Supported Models"}}
{"content": "## Configuration in Roo Code  \n1.  **Open Roo Code Settings:** Click the gear icon (<Codicon name=\"gear\" />) in the Roo Code panel.\n2.  **Select Provider:** Choose \"Anthropic\" from the \"API Provider\" dropdown.\n3.  **Enter API Key:** Paste your Anthropic API key into the \"Anthropic API Key\" field.\n4.  **Select Model:** Choose your desired Claude model from the \"Model\" dropdown.\n5.  **(Optional) Custom Base URL:** If you need to use a custom base URL for the Anthropic API, check \"Use custom base URL\" and enter the URL. Most people won't need to adjust this.", "metadata": {"path": "providers/anthropic.md", "name": "anthropic.md", "header1": "Using Anthropic With Roo Code", "header2": "Configuration in Roo Code"}}
{"content": "## Tips and Notes  \n*   **Prompt Caching:** Claude 3 models support [prompt caching](https://docs.anthropic.com/en/docs/build-with-claude/prompt-caching), which can significantly reduce costs and latency for repeated prompts.\n*   **Context Window:** Claude models have large context windows (200,000 tokens), allowing you to include a significant amount of code and context in your prompts.\n*   **Pricing:** Refer to the [Anthropic Pricing](https://www.anthropic.com/pricing) page for the latest pricing information.\n*   **Rate Limits:** Anthropic has strict rate limits based on [usage tiers](https://docs.anthropic.com/en/api/rate-limits#requirements-to-advance-tier). If you're repeatedly hitting rate limits, consider contacting Anthropic sales or accessing Claude through a different provider like [OpenRouter](/providers/openrouter).", "metadata": {"path": "providers/anthropic.md", "name": "anthropic.md", "header1": "Using Anthropic With Roo Code", "header2": "Tips and Notes"}}
{"content": "---\nsidebar_label: OpenRouter\n---", "metadata": {"path": "providers/openrouter.md", "name": "openrouter.md"}}
{"content": "# Using OpenRouter With Roo Code  \nOpenRouter is an AI platform that provides access to a wide variety of language models from different providers, all through a single API.  This can simplify setup and allow you to easily experiment with different models.  \n**Website:** [https://openrouter.ai/](https://openrouter.ai/)", "metadata": {"path": "providers/openrouter.md", "name": "openrouter.md", "header1": "Using OpenRouter With Roo Code"}}
{"content": "## Getting an API Key  \n1.  **Sign Up/Sign In:** Go to the [OpenRouter website](https://openrouter.ai/).  Sign in with your Google or GitHub account.\n2.  **Get an API Key:** Go to the [keys page](https://openrouter.ai/keys).  You should see an API key listed.  If not, create a new key.\n3.  **Copy the Key:** Copy the API key.", "metadata": {"path": "providers/openrouter.md", "name": "openrouter.md", "header1": "Using OpenRouter With Roo Code", "header2": "Getting an API Key"}}
{"content": "## Supported Models  \nOpenRouter supports a large and growing number of models.  Roo Code automatically fetches the list of available models. Refer to the [OpenRouter Models page](https://openrouter.ai/models) for the complete and up-to-date list.", "metadata": {"path": "providers/openrouter.md", "name": "openrouter.md", "header1": "Using OpenRouter With Roo Code", "header2": "Supported Models"}}
{"content": "## Configuration in Roo Code  \n1.  **Open Roo Code Settings:** Click the gear icon (<Codicon name=\"gear\" />) in the Roo Code panel.\n2.  **Select Provider:** Choose \"OpenRouter\" from the \"API Provider\" dropdown.\n3.  **Enter API Key:** Paste your OpenRouter API key into the \"OpenRouter API Key\" field.\n4.  **Select Model:** Choose your desired model from the \"Model\" dropdown.\n5.  **(Optional) Custom Base URL:** If you need to use a custom base URL for the OpenRouter API, check \"Use custom base URL\" and enter the URL. Leave this blank for most users.", "metadata": {"path": "providers/openrouter.md", "name": "openrouter.md", "header1": "Using OpenRouter With Roo Code", "header2": "Configuration in Roo Code"}}
{"content": "## Supported Transforms  \nOpenRouter provides an [optional \"middle-out\" message transform](https://openrouter.ai/docs/features/message-transforms) to help with prompts that exceed the maximum context size of a model. You can enable it by checking the \"Compress prompts and message chains to the context size\" box.", "metadata": {"path": "providers/openrouter.md", "name": "openrouter.md", "header1": "Using OpenRouter With Roo Code", "header2": "Supported Transforms"}}
{"content": "## Tips and Notes  \n* **Model Selection:** OpenRouter offers a wide range of models. Experiment to find the best one for your needs.\n* **Pricing:**  OpenRouter charges based on the underlying model's pricing.  See the [OpenRouter Models page](https://openrouter.ai/models) for details.\n* **Prompt Caching:** Some providers support prompt caching. See the OpenRouter documentation for supported models.", "metadata": {"path": "providers/openrouter.md", "name": "openrouter.md", "header1": "Using OpenRouter With Roo Code", "header2": "Tips and Notes"}}
{"content": "---\nsidebar_label: VS Code Language Model API\n---", "metadata": {"path": "providers/vscode-lm.md", "name": "vscode-lm.md"}}
{"content": "# Using VS Code Language Model API With Roo Code  \nRoo Code includes *experimental* support for the [VS Code Language Model API](https://code.visualstudio.com/api/language-extensions/language-model-access). This API allows extensions to provide access to language models directly within VS Code.  This means you can potentially use models from:  \n*   **GitHub Copilot:** If you have a Copilot subscription and the extension installed.\n*   **Other VS Code Extensions:** Any extension that implements the Language Model API.  \n**Important:** This integration is highly experimental and may not work as expected.  It is dependent on other extensions correctly implementing the VS Code Language Model API.", "metadata": {"path": "providers/vscode-lm.md", "name": "vscode-lm.md", "header1": "Using VS Code Language Model API With Roo Code"}}
{"content": "## Prerequisites  \n*   **VS Code:**  The Language Model API is available through VS Code (and is not currently supported by Cursor).\n*   **A Language Model Provider Extension:**  You need an extension that provides a language model.  Examples include:\n*   **GitHub Copilot:**  If you have a Copilot subscription, the GitHub Copilot and GitHub Copilot Chat extensions can provide models.\n*   **Other Extensions:**  Search the VS Code Marketplace for extensions that mention \"Language Model API\" or \"lm\".  There may be other experimental extensions available.", "metadata": {"path": "providers/vscode-lm.md", "name": "vscode-lm.md", "header1": "Using VS Code Language Model API With Roo Code", "header2": "Prerequisites"}}
{"content": "## Configuration  \n1.  **Open Roo Code Settings:** Click the gear icon (<Codicon name=\"gear\" />) in the Roo Code panel.\n2.  **Select Provider:** Choose \"VS Code LM API\" from the \"API Provider\" dropdown.\n3.  **Select Model:**  The \"Language Model\" dropdown will (eventually) list available models. The format is `vendor/family`. For example, if you have Copilot, you might see options like:\n*   `copilot - claude-3.5-sonnet`\n*   `copilot - o3-mini`\n*   `copilot - o1-ga`\n*   `copilot - gemini-2.0-flash`", "metadata": {"path": "providers/vscode-lm.md", "name": "vscode-lm.md", "header1": "Using VS Code Language Model API With Roo Code", "header2": "Configuration"}}
{"content": "## Limitations  \n*   **Experimental API:**  The VS Code Language Model API is still under development.  Expect changes and potential instability.\n*   **Extension Dependent:**  This feature relies entirely on other extensions providing models.  Roo Code cannot directly control which models are available.\n*   **Limited Functionality:**  The VS Code Language Model API may not support all the features of other API providers (e.g., image input, streaming, detailed usage information).\n*   **No Direct Cost Control:**  You are subject to the pricing and terms of the extension providing the model.  Roo Code cannot directly track or limit costs.", "metadata": {"path": "providers/vscode-lm.md", "name": "vscode-lm.md", "header1": "Using VS Code Language Model API With Roo Code", "header2": "Limitations"}}
{"content": "## Troubleshooting  \n*   **No Models Appear:**\n*   Ensure you have VS Code installed.\n*   Ensure you have a language model provider extension installed and enabled (e.g., GitHub Copilot, GitHub Copilot Chat).\n*   If using Copilot, make sure that you have sent a Copilot Chat message using the model you would like to use.\n*   **Unexpected Behavior:**  If you encounter unexpected behavior, it's likely an issue with the underlying Language Model API or the provider extension.  Consider reporting the issue to the provider extension's developers.", "metadata": {"path": "providers/vscode-lm.md", "name": "vscode-lm.md", "header1": "Using VS Code Language Model API With Roo Code", "header2": "Troubleshooting"}}
{"content": "---\nsidebar_label: Glama\n---", "metadata": {"path": "providers/glama.md", "name": "glama.md"}}
{"content": "# Using Glama With Roo Code  \nGlama provides access to a variety of language models through a unified API, including models from Anthropic, OpenAI, and others.  It offers features like prompt caching and cost tracking.  \n**Website:** [https://glama.ai/](https://glama.ai/)", "metadata": {"path": "providers/glama.md", "name": "glama.md", "header1": "Using Glama With Roo Code"}}
{"content": "## Getting an API Key  \n1.  **Sign Up/Sign In:** Go to the [Glama sign-up page](https://glama.ai/sign-up). Sign up using your Google account or name/email/password.\n2.  **Get API Key:** After signing up, navigate to the [API Keys](https://glama.ai/settings/gateway/api-keys) page to get an API key.\n3.  **Copy the Key:** Copy the displayed API key.", "metadata": {"path": "providers/glama.md", "name": "glama.md", "header1": "Using Glama With Roo Code", "header2": "Getting an API Key"}}
{"content": "## Supported Models  \nRoo Code will automatically try to fetch a list of available models from the Glama API.  Some models that are commonly available through Glama include:  \n*  **Anthropic Claude models:**  (e.g., `anthropic/claude-3-5-sonnet`)  These are generally recommended for best performance with Roo Code.\n*  **OpenAI models:** (e.g., `openai/o3-mini-high`)\n*  **Other providers and open-source models**  \nRefer to the [Glama documentation](https://glama.ai/models) for the most up-to-date list of supported models.", "metadata": {"path": "providers/glama.md", "name": "glama.md", "header1": "Using Glama With Roo Code", "header2": "Supported Models"}}
{"content": "## Configuration in Roo Code  \n1.  **Open Roo Code Settings:** Click the gear icon (<Codicon name=\"gear\" />) in the Roo Code panel.\n2.  **Select Provider:** Choose \"Glama\" from the \"API Provider\" dropdown.\n3.  **Enter API Key:** Paste your Glama API key into the \"Glama API Key\" field.\n4.  **Select Model:** Choose your desired model from the \"Model\" dropdown.", "metadata": {"path": "providers/glama.md", "name": "glama.md", "header1": "Using Glama With Roo Code", "header2": "Configuration in Roo Code"}}
{"content": "## Tips and Notes  \n* **Pricing:** Glama operates on a pay-per-use basis.  Pricing varies depending on the model you choose.\n* **Prompt Caching:** Glama supports prompt caching, which can significantly reduce costs and improve performance for repeated prompts.", "metadata": {"path": "providers/glama.md", "name": "glama.md", "header1": "Using Glama With Roo Code", "header2": "Tips and Notes"}}
{"content": "---\nsidebar_label: DeepSeek\n---", "metadata": {"path": "providers/deepseek.md", "name": "deepseek.md"}}
{"content": "# Using DeepSeek With Roo Code  \nRoo Code supports accessing models through the DeepSeek API, including `deepseek-chat` and `deepseek-reasoner`.  \n**Website:** [https://platform.deepseek.com/](https://platform.deepseek.com/)", "metadata": {"path": "providers/deepseek.md", "name": "deepseek.md", "header1": "Using DeepSeek With Roo Code"}}
{"content": "## Getting an API Key  \n1.  **Sign Up/Sign In:** Go to the [DeepSeek Platform](https://platform.deepseek.com/). Create an account or sign in.\n2.  **Navigate to API Keys:** Find your API keys in the [API keys](https://platform.deepseek.com/api_keys) section of the platform.\n3.  **Create a Key:** Click \"Create new API key\".  Give your key a descriptive name (e.g., \"Roo Code\").\n4.  **Copy the Key:**  **Important:** Copy the API key *immediately*.  You will not be able to see it again.  Store it securely.", "metadata": {"path": "providers/deepseek.md", "name": "deepseek.md", "header1": "Using DeepSeek With Roo Code", "header2": "Getting an API Key"}}
{"content": "## Supported Models  \nRoo Code supports the following DeepSeek models:  \n*   `deepseek-chat` (Recommended for coding tasks)\n*  `deepseek-reasoner` (Recommended for reasoning tasks)", "metadata": {"path": "providers/deepseek.md", "name": "deepseek.md", "header1": "Using DeepSeek With Roo Code", "header2": "Supported Models"}}
{"content": "## Configuration in Roo Code  \n1.  **Open Roo Code Settings:** Click the gear icon (<Codicon name=\"gear\" />) in the Roo Code panel.\n2.  **Select Provider:** Choose \"DeepSeek\" from the \"API Provider\" dropdown.\n3.  **Enter API Key:** Paste your DeepSeek API key into the \"DeepSeek API Key\" field.\n4.  **Select Model:** Choose your desired model from the \"Model\" dropdown.", "metadata": {"path": "providers/deepseek.md", "name": "deepseek.md", "header1": "Using DeepSeek With Roo Code", "header2": "Configuration in Roo Code"}}
{"content": "## Tips and Notes\n*   **Pricing:** Refer to the [DeepSeek Pricing](https://api-docs.deepseek.com/quick_start/pricing/) page for details on model costs.", "metadata": {"path": "providers/deepseek.md", "name": "deepseek.md", "header1": "Using DeepSeek With Roo Code", "header2": "Tips and Notes"}}
{"content": "---\nsidebar_label: GCP Vertex AI\n---", "metadata": {"path": "providers/vertex.md", "name": "vertex.md"}}
{"content": "# Using GCP Vertex AI With Roo Code  \nRoo Code supports accessing models through Google Cloud Platform's Vertex AI, a managed machine learning platform that provides access to various foundation models, including Anthropic's Claude family.  \n**Website:** [https://cloud.google.com/vertex-ai](https://cloud.google.com/vertex-ai)", "metadata": {"path": "providers/vertex.md", "name": "vertex.md", "header1": "Using GCP Vertex AI With Roo Code"}}
{"content": "## Prerequisites  \n*   **Google Cloud Account:** You need an active Google Cloud Platform (GCP) account.\n*   **Project:** You need a GCP project with the Vertex AI API enabled.\n*   **Model Access:** You must request and be granted access to the specific Claude models on Vertex AI you want to use. See the [Google Cloud documentation](https://cloud.google.com/vertex-ai/generative-ai/docs/partner-models/use-claude#before_you_begin) for instructions.\n*   **Application Default Credentials (ADC):**  Roo Code uses Application Default Credentials to authenticate with Vertex AI. The easiest way to set this up is to:\n1.  Install the Google Cloud CLI: [https://cloud.google.com/sdk/docs/install](https://cloud.google.com/sdk/docs/install)\n2.  Authenticate using: `gcloud auth application-default login`", "metadata": {"path": "providers/vertex.md", "name": "vertex.md", "header1": "Using GCP Vertex AI With Roo Code", "header2": "Prerequisites"}}
{"content": "## Supported Models  \nRoo Code supports the following models through Vertex AI:  \n*   `claude-3-5-sonnet-v2@20241022` (Recommended): A powerful model balancing performance and cost. Supports image inputs.\n*`claude-3-5-sonnet@20240620`\n*   `claude-3-5-haiku@20241022`\n*   `claude-3-opus@20240229`\n*   `claude-3-haiku@20240307`  \nRefer to the [Google Cloud documentation](https://cloud.google.com/vertex-ai/generative-ai/docs/partner-models/use-claude) for the most up-to-date list of available models and their IDs.", "metadata": {"path": "providers/vertex.md", "name": "vertex.md", "header1": "Using GCP Vertex AI With Roo Code", "header2": "Supported Models"}}
{"content": "## Configuration in Roo Code  \n1.  **Open Roo Code Settings:** Click the gear icon (<Codicon name=\"gear\" />) in the Roo Code panel.\n2.  **Select Provider:** Choose \"GCP Vertex AI\" from the \"API Provider\" dropdown.\n3.  **Enter Project ID:** Enter your Google Cloud Project ID.\n4.  **Select Region:** Choose the region where your Vertex AI resources are located (e.g., `us-east5`).\n5.  **Select Model:** Choose your desired model from the \"Model\" dropdown.", "metadata": {"path": "providers/vertex.md", "name": "vertex.md", "header1": "Using GCP Vertex AI With Roo Code", "header2": "Configuration in Roo Code"}}
{"content": "## Tips and Notes  \n*   **Permissions:**  Ensure your Google Cloud account has the necessary permissions to access Vertex AI and the specific models you want to use.\n*   **Pricing:** Refer to the [Vertex AI pricing](https://cloud.google.com/vertex-ai/pricing) page for details.", "metadata": {"path": "providers/vertex.md", "name": "vertex.md", "header1": "Using GCP Vertex AI With Roo Code", "header2": "Tips and Notes"}}
{"content": "---\nsidebar_label: Mistral AI\n---", "metadata": {"path": "providers/mistral.md", "name": "mistral.md"}}
{"content": "# Using Mistral AI With Roo Code  \nRoo Code supports accessing models through the Mistral AI API, including both standard Mistral models and the code-specialized Codestral model.  \n**Website:** [https://mistral.ai/](https://mistral.ai/)", "metadata": {"path": "providers/mistral.md", "name": "mistral.md", "header1": "Using Mistral AI With Roo Code"}}
{"content": "## Getting an API Key  \n1.  **Sign Up/Sign In:** Go to the [Mistral Platform](https://console.mistral.ai/). Create an account or sign in.  You may need to go through a verification process.\n2.  **Create an API Key:**\n- [La Plateforme API Key](https://console.mistral.ai/api-keys/) and/or\n- [Codestral API Key](https://console.mistral.ai/codestral)", "metadata": {"path": "providers/mistral.md", "name": "mistral.md", "header1": "Using Mistral AI With Roo Code", "header2": "Getting an API Key"}}
{"content": "## Supported Models  \nRoo Code supports the following Mistral models:  \n| Model ID               | Model Default Temperature | Function Calling | Vision / Image support |\n|------------------------|-------------------------|------------------|--------|\n| codestral-latest      | 0.3                     | \u2705               | \u274c      |\n| mistral-large-latest  | 0.7                     | \u2705               | \u274c      |\n| mistral-8b-latest   | 0.3                     | \u2705               | \u274c      |\n| mistral-3b-latest   | 0.3                     | \u2705               | \u274c      |\n| mistral-small-latest  | 0.3                     | \u2705               | \u274c      |\n| pixtral-large-latest  | 0.7                     | \u2705               | \u2705      |  \nThe default model temperature in Roo Code is 0.0, so you should consider experimenting with [temperature adjustments](/advanced-usage/model-temperature)!  \n**Note:**  Model availability and specifications may change.\nRefer to the [Mistral AI documentation](https://docs.mistral.ai/api/) and [Mistral Model Overview](https://docs.mistral.ai/getting-started/models/models_overview/) for the latest information.", "metadata": {"path": "providers/mistral.md", "name": "mistral.md", "header1": "Using Mistral AI With Roo Code", "header2": "Supported Models"}}
{"content": "## Configuration in Roo Code  \n1.  **Open Roo Code Settings:** Click the gear icon (<Codicon name=\"gear\" />) in the Roo Code panel.\n2.  **Select Provider:** Choose \"Mistral\" from the \"API Provider\" dropdown.\n3.  **Enter API Key:** Paste your Mistral API key into the \"Mistral API Key\" field if you're using a `mistral` model.  If you intend to use `codestral-latest`, see the \"Codestral\" section below.\n4.  **Select Model:** Choose your desired model from the \"Model\" dropdown.", "metadata": {"path": "providers/mistral.md", "name": "mistral.md", "header1": "Using Mistral AI With Roo Code", "header2": "Configuration in Roo Code"}}
{"content": "## Using Codestral  \n[Codestral](https://docs.mistral.ai/capabilities/code_generation/) is a model specifically designed for code generation and interaction.\nOnly for Codestral you could use different endpoints (Default: codestral.mistral.ai).\nFor the La Platforme API Key change the **Codestral Base Url** to: https://api.mistral.ai  \nTo use Codestral:  \n1.  **Select \"Mistral\" as the API Provider.**\n2.  **Select a Codestral Model**\n3.  **Enter your Codestral (codestral.mistral.ai) or La Plateforme (api.mistral.ai) API Key.**", "metadata": {"path": "providers/mistral.md", "name": "mistral.md", "header1": "Using Mistral AI With Roo Code", "header2": "Using Codestral"}}
{"content": "---\nsidebar_label: Google Gemini\n---", "metadata": {"path": "providers/gemini.md", "name": "gemini.md"}}
{"content": "# Using Google Gemini With Roo Code  \nRoo Code supports Google's Gemini family of models through the Google AI Gemini API.  \n**Website:** [https://ai.google.dev/](https://ai.google.dev/)", "metadata": {"path": "providers/gemini.md", "name": "gemini.md", "header1": "Using Google Gemini With Roo Code"}}
{"content": "## Getting an API Key  \n1.  **Go to Google AI Studio:** Navigate to [https://ai.google.dev/](https://ai.google.dev/).\n2.  **Sign In:** Sign in with your Google account.\n3.  **Create API Key:** Click on \"Create API key\" in the left-hand menu.\n4.  **Copy API Key:** Copy the generated API key.", "metadata": {"path": "providers/gemini.md", "name": "gemini.md", "header1": "Using Google Gemini With Roo Code", "header2": "Getting an API Key"}}
{"content": "## Supported Models  \nRoo Code supports the following Gemini models:  \n* `gemini-2.0-flash-001`\n* `gemini-2.0-flash-lite-preview-02-05`\n* `gemini-2.0-pro-exp-02-05`\n* `gemini-2.0-flash-thinking-exp-1219`\n* `gemini-2.0-flash-exp`\n* `gemini-1.5-flash-002`\n* `gemini-1.5-flash-exp-0827`\n* `gemini-1.5-flash-8b-exp-0827`\n* `gemini-1.5-pro-002`\n* `gemini-1.5-pro-exp-0827`\n* `gemini-exp-1206`  \nRefer to the [Gemini documentation](https://ai.google.dev/models/gemini) for more details on each model.", "metadata": {"path": "providers/gemini.md", "name": "gemini.md", "header1": "Using Google Gemini With Roo Code", "header2": "Supported Models"}}
{"content": "## Configuration in Roo Code  \n1.  **Open Roo Code Settings:** Click the gear icon (<Codicon name=\"gear\" />) in the Roo Code panel.\n2.  **Select Provider:** Choose \"Google Gemini\" from the \"API Provider\" dropdown.\n3.  **Enter API Key:** Paste your Gemini API key into the \"Gemini API Key\" field.\n4.  **Select Model:** Choose your desired Gemini model from the \"Model\" dropdown.", "metadata": {"path": "providers/gemini.md", "name": "gemini.md", "header1": "Using Google Gemini With Roo Code", "header2": "Configuration in Roo Code"}}
{"content": "## Tips and Notes  \n*   **Pricing:**  Gemini API usage is priced based on input and output tokens. Refer to the [Gemini pricing page](https://ai.google.dev/pricing) for detailed information.", "metadata": {"path": "providers/gemini.md", "name": "gemini.md", "header1": "Using Google Gemini With Roo Code", "header2": "Tips and Notes"}}
{"content": "---\nsidebar_label: LM Studio\n---", "metadata": {"path": "providers/lmstudio.md", "name": "lmstudio.md"}}
{"content": "# Using LM Studio With Roo Code  \nRoo Code supports running models locally using LM Studio.  LM Studio provides a user-friendly interface for downloading, configuring, and running local language models.  It also includes a built-in local inference server that emulates the OpenAI API, making it easy to integrate with Roo Code.  \n**Website:** [https://lmstudio.ai/](https://lmstudio.ai/)", "metadata": {"path": "providers/lmstudio.md", "name": "lmstudio.md", "header1": "Using LM Studio With Roo Code"}}
{"content": "## Setting Up LM Studio  \n1.  **Download and Install LM Studio:** Download LM Studio from the [LM Studio website](https://lmstudio.ai/).\n2.  **Download a Model:**  Use the LM Studio interface to search for and download a model.  Some recommended models include:\n*   CodeLlama models (e.g., `codellama:7b-code`, `codellama:13b-code`, `codellama:34b-code`)\n*   Mistral models (e.g., `mistralai/Mistral-7B-Instruct-v0.1`)\n*   DeepSeek Coder models (e.g., `deepseek-coder:6.7b-base`)\n* Any other model that is supported by Roo, or for which you can set the context window.  \nLook for models in the GGUF format.  LM Studio provides a search interface to find and download models.\n3.  **Start the Local Server:**\n*   Open LM Studio.\n*   Click the **\"Local Server\"** tab (the icon looks like `<->`).\n*   Select the model you downloaded.\n*   Click **\"Start Server\"**.", "metadata": {"path": "providers/lmstudio.md", "name": "lmstudio.md", "header1": "Using LM Studio With Roo Code", "header2": "Setting Up LM Studio"}}
{"content": "## Configuration in Roo Code  \n1.  **Open Roo Code Settings:** Click the gear icon (<Codicon name=\"gear\" />) in the Roo Code panel.\n2.  **Select Provider:** Choose \"LM Studio\" from the \"API Provider\" dropdown.\n3.  **Enter Model ID:** Enter the *file name* of the model you loaded in LM Studio (e.g., `codellama-7b.Q4_0.gguf`).  You can find this in the LM Studio \"Local Server\" tab.\n4.  **(Optional) Base URL:**  By default, Roo Code will connect to LM Studio at `http://localhost:1234`.  If you've configured LM Studio to use a different address or port, enter the full URL here.", "metadata": {"path": "providers/lmstudio.md", "name": "lmstudio.md", "header1": "Using LM Studio With Roo Code", "header2": "Configuration in Roo Code"}}
{"content": "## Tips and Notes  \n*   **Resource Requirements:** Running large language models locally can be resource-intensive. Make sure your computer meets the minimum requirements for the model you choose.\n*   **Model Selection:**  LM Studio provides a wide range of models.  Experiment to find the one that best suits your needs.\n*   **Local Server:**  The LM Studio local server must be running for Roo Code to connect to it.\n*   **LM Studio Documentation:** Refer to the [LM Studio documentation](https://lmstudio.ai/docs) for more information.\n*   **Troubleshooting:** If you see a \"Please check the LM Studio developer logs to debug what went wrong\" error, you may need to adjust the context length settings in LM Studio.", "metadata": {"path": "providers/lmstudio.md", "name": "lmstudio.md", "header1": "Using LM Studio With Roo Code", "header2": "Tips and Notes"}}
{"content": "---\nsidebar_label: Unbound\n---", "metadata": {"path": "providers/unbound.md", "name": "unbound.md"}}
{"content": "# Using Unbound With Roo Code  \nRoo Code supports accessing models through [Unbound](https://getunbound.ai/), a platform that focuses on providing secure and reliable access to a variety of large language models (LLMs). Unbound acts as a gateway, allowing you to use models from providers like Anthropic and OpenAI without needing to manage multiple API keys and configurations directly.  They emphasize security and compliance features for enterprise use.  \n**Website:** [https://getunbound.ai/](https://getunbound.ai/)", "metadata": {"path": "providers/unbound.md", "name": "unbound.md", "header1": "Using Unbound With Roo Code"}}
{"content": "## Creating an Account  \n1.  **Sign Up/Sign In:** Go to the [Unbound gateway](https://gateway.getunbound.ai).  Create an account or sign in.\n2.  **Create an Application:** Go to the [Applications](https://gateway.getunbound.ai/ai-gateway-applications) page and hit the \"Create Application\" button.\n3.  **Copy the API Key:** Copy the API key to your clipboard.", "metadata": {"path": "providers/unbound.md", "name": "unbound.md", "header1": "Using Unbound With Roo Code", "header2": "Creating an Account"}}
{"content": "## Supported Models  \nUnbound allows you configure a list of supported models in your application, and Roo Code will automatically fetch the list of available models from the Unbound API.", "metadata": {"path": "providers/unbound.md", "name": "unbound.md", "header1": "Using Unbound With Roo Code", "header2": "Supported Models"}}
{"content": "## Configuration in Roo Code  \n1.  **Open Roo Code Settings:** Click the gear icon (<Codicon name=\"gear\" />) in the Roo Code panel.\n2.  **Select Provider:** Choose \"Unbound\" from the \"API Provider\" dropdown.\n3.  **Enter API Key:** Paste your Unbound API key into the \"Unbound API Key\" field.\n4.  **Select Model:** Choose your desired model from the \"Model\" dropdown.", "metadata": {"path": "providers/unbound.md", "name": "unbound.md", "header1": "Using Unbound With Roo Code", "header2": "Configuration in Roo Code"}}
{"content": "## Tips and Notes  \n* **Security Focus:** Unbound emphasizes security features for enterprise use. If your organization has strict security requirements for AI usage, Unbound might be a good option.", "metadata": {"path": "providers/unbound.md", "name": "unbound.md", "header1": "Using Unbound With Roo Code", "header2": "Tips and Notes"}}
{"content": "---\nsidebar_label: OpenAI\n---", "metadata": {"path": "providers/openai.md", "name": "openai.md"}}
{"content": "# Using OpenAI With Roo Code  \nRoo Code supports accessing models directly through the official OpenAI API.  \n**Website:** [https://openai.com/](https://openai.com/)", "metadata": {"path": "providers/openai.md", "name": "openai.md", "header1": "Using OpenAI With Roo Code"}}
{"content": "## Getting an API Key  \n1.  **Sign Up/Sign In:** Go to the [OpenAI Platform](https://platform.openai.com/). Create an account or sign in.\n2.  **Navigate to API Keys:** Go to the [API keys](https://platform.openai.com/api-keys) page.\n3.  **Create a Key:** Click \"Create new secret key\". Give your key a descriptive name (e.g., \"Roo Code\").\n4.  **Copy the Key:** **Important:** Copy the API key *immediately*. You will not be able to see it again. Store it securely.", "metadata": {"path": "providers/openai.md", "name": "openai.md", "header1": "Using OpenAI With Roo Code", "header2": "Getting an API Key"}}
{"content": "## Supported Models  \nRoo Code supports a variety of OpenAI models, including:  \n*`o3-mini` (medium reasoning effort)\n*`o3-mini-high` (high reasoning effort)\n* `o3-mini-low` (low reasoning effort)\n* `o1`\n* `o1-preview`\n*`o1-mini`\n* `gpt-4o`\n* `gpt-4o-mini`  \nRefer to the [OpenAI Models documentation](https://platform.openai.com/docs/models) for the most up-to-date list of models and capabilities.", "metadata": {"path": "providers/openai.md", "name": "openai.md", "header1": "Using OpenAI With Roo Code", "header2": "Supported Models"}}
{"content": "## Configuration in Roo Code  \n1.  **Open Roo Code Settings:** Click the gear icon (<Codicon name=\"gear\" />) in the Roo Code panel.\n2.  **Select Provider:** Choose \"OpenAI\" from the \"API Provider\" dropdown.\n3.  **Enter API Key:** Paste your OpenAI API key into the \"OpenAI API Key\" field.\n4.  **Select Model:** Choose your desired model from the \"Model\" dropdown.", "metadata": {"path": "providers/openai.md", "name": "openai.md", "header1": "Using OpenAI With Roo Code", "header2": "Configuration in Roo Code"}}
{"content": "## Tips and Notes  \n*   **Pricing:** Refer to the [OpenAI Pricing](https://openai.com/pricing) page for details on model costs.\n*   **Azure OpenAI Service:** If you'd like to use the Azure OpenAI service, please see our section on [OpenAI-compatible](./openai-compatible.md) providers.", "metadata": {"path": "providers/openai.md", "name": "openai.md", "header1": "Using OpenAI With Roo Code", "header2": "Tips and Notes"}}
{"content": "---\nsidebar_label: OpenAI Compatible\n---", "metadata": {"path": "providers/openai-compatible.md", "name": "openai-compatible.md"}}
{"content": "# Using OpenAI Compatible Providers With Roo Code  \nRoo Code supports a wide range of AI model providers that offer APIs compatible with the OpenAI API standard. This means you can use models from providers *other than* OpenAI, while still using a familiar API interface.  This includes providers like:  \n*   **Local models** running through tools like Ollama and LM Studio (covered in separate sections).\n*   **Cloud providers** like Perplexity, Together AI, Anyscale, and others.\n*   **Any other provider** offering an OpenAI-compatible API endpoint.  \nThis document focuses on setting up providers *other than* the official OpenAI API (which has its own [dedicated configuration page](./openai.md)).", "metadata": {"path": "providers/openai-compatible.md", "name": "openai-compatible.md", "header1": "Using OpenAI Compatible Providers With Roo Code"}}
{"content": "## General Configuration  \nThe key to using an OpenAI-compatible provider is to configure two main settings:  \n1.  **Base URL:** This is the API endpoint for the provider.  It will *not* be `https://api.openai.com/v1` (that's for the official OpenAI API).\n2.  **API Key:**  This is the secret key you obtain from the provider.\n3.  **Model ID:** This is the model name of the specific model.  \nYou'll find these settings in the Roo Code settings panel (click the <Codicon name=\"gear\" /> icon):  \n*   **API Provider:** Select \"OpenAI Compatible\".\n*   **Base URL:** Enter the base URL provided by your chosen provider.  **This is crucial.**\n*   **API Key:** Enter your API key.\n*   **Model:** Chooose a model.\n*   **Model Configuration:** This lets you customize advanced configuration for the model\n- Max Output Tokens\n- Context Window\n- Image Support\n- Computer Use\n- Input Price\n- Output Price", "metadata": {"path": "providers/openai-compatible.md", "name": "openai-compatible.md", "header1": "Using OpenAI Compatible Providers With Roo Code", "header2": "General Configuration"}}
{"content": "## Troubleshooting  \n*   **\"Invalid API Key\":** Double-check that you've entered the API key correctly.\n*   **\"Model Not Found\":** Make sure you're using a valid model ID for your chosen provider.\n*   **Connection Errors:** Verify the Base URL is correct and that your provider's API is accessible.\n*   **Unexpected Results:** If you're getting unexpected results, try a different model.  \nBy using an OpenAI-compatible provider, you can leverage the flexibility of Roo Code with a wider range of AI models. Remember to always consult your provider's documentation for the most accurate and up-to-date information.", "metadata": {"path": "providers/openai-compatible.md", "name": "openai-compatible.md", "header1": "Using OpenAI Compatible Providers With Roo Code", "header2": "Troubleshooting"}}
{"content": "---\nsidebar_label: Ollama\n---", "metadata": {"path": "providers/ollama.md", "name": "ollama.md"}}
{"content": "# Using Ollama With Roo Code  \nRoo Code supports running models locally using Ollama. This provides privacy, offline access, and potentially lower costs, but requires more setup and a powerful computer.  \n**Website:** [https://ollama.com/](https://ollama.com/)", "metadata": {"path": "providers/ollama.md", "name": "ollama.md", "header1": "Using Ollama With Roo Code"}}
{"content": "## Setting up Ollama  \n1.  **Download and Install Ollama:**  Download the Ollama installer for your operating system from the [Ollama website](https://ollama.com/). Follow the installation instructions. Make sure Ollama is running  \n```bash\nollama serve\n```  \n2.  **Download a Model:**  Ollama supports many different models.  You can find a list of available models on the [Ollama website](https://ollama.com/library).  Some recommended models for coding tasks include:  \n*   `codellama:7b-code` (good starting point, smaller)\n*   `codellama:13b-code` (better quality, larger)\n*   `codellama:34b-code` (even better quality, very large)\n*   `qwen2.5-coder:32b`\n*   `mistralai/Mistral-7B-Instruct-v0.1` (good general-purpose model)\n*   `deepseek-coder:6.7b-base` (good for coding tasks)\n*   `llama3:8b-instruct-q5_1` (good for general tasks)  \nTo download a model, open your terminal and run:  \n```bash\nollama pull <model_name>\n```  \nFor example:  \n```bash\nollama pull qwen2.5-coder:32b\n```  \n3. **Configure the Model:** by default, Ollama uses a context window size of 2048 tokens, which is too small for Roo Code requests. You need to have at least 12k to get decent results, ideally - 32k. To configure a model, you actually need to set its parameters and save a copy of it.  \nLoad the model (we will use `qwen2.5-coder:32b` as an example):  \n```bash\nollama run qwen2.5-coder:32b\n```  \nChange context size parameter:  \n```bash\n/set parameter num_ctx 32768\n```  \nSave the model with a new name:  \n```bash\n/save your_model_name\n```  \n4.  **Configure Roo Code:**\n*   Open the Roo Code sidebar (<Codicon name=\"rocket\" /> icon).\n*   Click the settings gear icon (<Codicon name=\"gear\" />).\n*   Select \"ollama\" as the API Provider.\n*   Enter the Model name from the previous step (e.g., `your_model_name`).\n*   (Optional) You can configure the base URL if you're running Ollama on a different machine. The default is `http://localhost:11434`.\n*   (Optional) Configure Model context size in Advanced settings, so Roo Code knows how to manage its sliding window.", "metadata": {"path": "providers/ollama.md", "name": "ollama.md", "header1": "Using Ollama With Roo Code", "header2": "Setting up Ollama"}}
{"content": "## Tips and Notes  \n*   **Resource Requirements:** Running large language models locally can be resource-intensive.  Make sure your computer meets the minimum requirements for the model you choose.\n*   **Model Selection:** Experiment with different models to find the one that best suits your needs.\n*   **Offline Use:** Once you've downloaded a model, you can use Roo Code offline with that model.\n*   **Ollama Documentation:** Refer to the [Ollama documentation](https://ollama.com/docs) for more information on installing, configuring, and using Ollama.", "metadata": {"path": "providers/ollama.md", "name": "ollama.md", "header1": "Using Ollama With Roo Code", "header2": "Tips and Notes"}}
{"content": "---\nsidebar_label: AWS Bedrock\n---", "metadata": {"path": "providers/bedrock.md", "name": "bedrock.md"}}
{"content": "# Using AWS Bedrock With Roo Code  \nRoo Code supports accessing models through Amazon Bedrock, a fully managed service that makes a selection of high-performing foundation models (FMs) from leading AI companies available via a single API.  \n**Website:** [https://aws.amazon.com/bedrock/](https://aws.amazon.com/bedrock/)", "metadata": {"path": "providers/bedrock.md", "name": "bedrock.md", "header1": "Using AWS Bedrock With Roo Code"}}
{"content": "## Prerequisites  \n*   **AWS Account:** You need an active AWS account.\n*   **Bedrock Access:** You must request and be granted access to Amazon Bedrock.  See the [AWS Bedrock documentation](https://docs.aws.amazon.com/bedrock/latest/userguide/getting-started.html) for details on requesting access.\n*   **Model Access:** Within Bedrock, you need to request access to the specific models you want to use (e.g., Anthropic Claude).\n*   **Install AWS CLI:** Use AWS CLI to configure your account for authentication\n```bash\naws configure\n```", "metadata": {"path": "providers/bedrock.md", "name": "bedrock.md", "header1": "Using AWS Bedrock With Roo Code", "header2": "Prerequisites"}}
{"content": "## Getting Credentials  \nYou have two main options for configuring AWS credentials:  \n1.  **AWS Access Keys (Recommended for Development):**\n*   Create an IAM user with the necessary permissions (at least `bedrock:InvokeModel`).\n*   Generate an access key ID and secret access key for that user.\n*   *(Optional)* Create a session token if required by your IAM configuration.\n2.  **AWS Profile:**\n*   Configure an AWS profile using the AWS CLI or by manually editing your AWS credentials file.  See the [AWS CLI documentation](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html) for details.", "metadata": {"path": "providers/bedrock.md", "name": "bedrock.md", "header1": "Using AWS Bedrock With Roo Code", "header2": "Getting Credentials"}}
{"content": "## Supported Models  \nRoo Code supports the following models through Bedrock:  \n* **Anthropic:**\n* `anthropic.claude-3-5-sonnet-20241022-v2:0`\n* `anthropic.claude-3-5-haiku-20241022-v1:0`\n* `anthropic.claude-3-opus-20240229-v1:0`\n* `anthropic.claude-3-sonnet-20240229-v1:0`\n* `anthropic.claude-3-haiku-20240307-v1:0`\n* **Meta:**\n* `meta.llama3-3-70b-instruct-v1:0`\n* `meta.llama3-2-90b-instruct-v1:0`\n* `meta.llama3-2-11b-instruct-v1:0`\n* `meta.llama3-2-3b-instruct-v1:0`\n* `meta.llama3-2-1b-instruct-v1:0`\n* `meta.llama3-1-405b-instruct-v1:0`\n* `meta.llama3-1-70b-instruct-v1:0`\n* `meta.llama3-1-8b-instruct-v1:0`\n* **Amazon**:\n* `amazon.nova-pro-v1:0`\n* `amazon.nova-lite-v1:0`\n* `amazon.nova-micro-v1:0`  \nRefer to the [Amazon Bedrock documentation](https://docs.aws.amazon.com/bedrock/latest/userguide/models-supported.html) for the most up-to-date list of available models and their IDs. Make sure to use the *model ID* when configuring Roo Code, not the model name.", "metadata": {"path": "providers/bedrock.md", "name": "bedrock.md", "header1": "Using AWS Bedrock With Roo Code", "header2": "Supported Models"}}
{"content": "## Configuration in Roo Code  \n1.  **Open Roo Code Settings:** Click the gear icon (<Codicon name=\"gear\" />) in the Roo Code panel.\n2.  **Select Provider:** Choose \"Bedrock\" from the \"API Provider\" dropdown.\n3.  **Select Authentication Method:**\n*   **AWS Credentials:**\n*   Enter your \"AWS Access Key\" and \"AWS Secret Key.\"\n*   (Optional) Enter your \"AWS Session Token\" if you're using temporary credentials.\n*   **AWS Profile:**\n*   Enter your \"AWS Profile\" name (e.g., \"default\").\n4.  **Select Region:** Choose the AWS region where your Bedrock service is available (e.g., \"us-east-1\").\n5.  **(Optional) Cross-Region Inference:** Check \"Use cross-region inference\" if you want to access models in a region different from your configured AWS region.\n6.  **Select Model:** Choose your desired model from the \"Model\" dropdown.", "metadata": {"path": "providers/bedrock.md", "name": "bedrock.md", "header1": "Using AWS Bedrock With Roo Code", "header2": "Configuration in Roo Code"}}
{"content": "## Tips and Notes  \n*   **Permissions:**  Ensure your IAM user or role has the necessary permissions to invoke Bedrock models.  The `bedrock:InvokeModel` permission is required.\n*   **Pricing:**  Refer to the [Amazon Bedrock pricing](https://aws.amazon.com/bedrock/pricing/) page for details on model costs.\n*   **Cross-Region Inference:**  Using cross-region inference may result in higher latency.", "metadata": {"path": "providers/bedrock.md", "name": "bedrock.md", "header1": "Using AWS Bedrock With Roo Code", "header2": "Tips and Notes"}}
{"content": "# Terminal Shell Integration  \n## What is Shell Integration?  \nShell integration is a [new feature in VSCode 1.93](https://code.visualstudio.com/updates/v1_93#_terminal-shell-integration-api) that allows extensions like Roo Code to run commands in your terminal and read their output. Command output allows Roo Code to react to the result of the command on its own, without you having to handhold by copy-pasting the output in yourself. It's also quite powerful when running development servers as it allows Roo Code to fix errors as the server logs them.", "metadata": {"path": "troubleshooting/shell-integration.md", "name": "shell-integration.md", "header1": "Terminal Shell Integration", "header2": "What is Shell Integration?"}}
{"content": "## How Shell Integration Works  \nShell integration uses special terminal sequences (like ANSI escape codes) to mark different stages of command execution in your terminal. Here's how it works:  \n1. **Activation**: When you open a terminal in VSCode, your shell sends an activation sequence (`\\x1b]633;A\\x07`) to initialize shell integration.  \n2. **Command Lifecycle**: VSCode shell integration uses OSC (Operating System Command) sequence 633 to track each command's lifecycle:\n- OSC 633 ; A - Mark prompt start\n- OSC 633 ; B - Mark command start\n- OSC 633 ; C - Mark command executed (pre-output)\n- OSC 633 ; D [; `<exitcode>`] - Mark command finished with optional exit code\n- OSC 633 ; E ; `<commandline>` [; `<nonce>`] - Explicitly set command line with optional nonce\n- OSC 633 ; P ; `<Property>=<Value>` - Set properties like current working directory  \n3. **Shell Integration Hooks**: Each shell uses specific hooks for different stages of command execution:  \n- Bash:\n* Initial activation: `PROMPT_COMMAND` (sets up initial environment)\n* Command start: `trap DEBUG` (triggers before command execution)\n* Command stop: `PROMPT_COMMAND` (triggers after command completion)  \n- Zsh:\n* Initial activation: `precmd` (sets up initial environment)\n* Command start: `preexec` (triggers before command execution)\n* Command stop: `precmd` (triggers after command completion)  \n- PowerShell:\n* Initial activation: `prompt` function (sets up initial environment)\n* Command input: `PSConsoleHostReadLine` (captures command input)\n* Command start/stop: `prompt` function (handles both command start and completion)  \n- Fish:\n* Initial activation: `fish_prompt` (sets up initial environment)\n* Command start: `fish_preexec` (triggers before command execution)\n* Command stop: `fish_prompt` (triggers after command completion)  \n> **Note:** This hook implementation information was discovered through AI inspection of the VSCode source tree. If you find any inaccuracies, please submit a pull request with corrections.  \nThese hooks emit OSC (Operating System Command) sequences that VSCode recognizes to track:\n- Prompt start/end positions\n- Command start/execution/finish events\n- Current working directory changes\n- Command line content and execution status  \n4. **Output Capture**: When a command runs, VSCode captures:\n- Command text and working directory\n- Start and end times\n- Exit codes\n- Output streams (stdout/stderr)  \nThis allows VSCode and extensions like Roo Code to:\n- Know exactly when commands start and finish\n- Capture command output reliably\n- Track command success/failure\n- Update the terminal UI with command status\n- React to command results automatically\n- Track the current working directory", "metadata": {"path": "troubleshooting/shell-integration.md", "name": "shell-integration.md", "header1": "Terminal Shell Integration", "header2": "How Shell Integration Works"}}
{"content": "## How to Fix \"Shell Integration Unavailable\"  \n### Step 1: Update VSCode or Cursor  \nFirst, make sure you're using the latest version of VSCode or Cursor:  \n1. Open VSCode or Cursor\n2. Press `Cmd + Shift + P` (Mac) or `Ctrl + Shift + P` (Windows/Linux)\n3. Type \"Check for Updates\" (VSCode) or \"Attempt Update\" (Cursor) and select it\n4. Restart VSCode/Cursor after the update  \n### Step 2: Configure VSCode to Use the Correct Shell  \n1. Open VSCode\n2. Press `Cmd + Shift + P` (Mac) or `Ctrl + Shift + P` (Windows/Linux)\n3. Type \"Terminal: Select Default Profile\" and choose it\n4. Select one of the supported shells: zsh, bash, fish, or PowerShell.  \n### Step 3: Restart VSCode  \nAfter making these changes:  \n1. Quit VSCode completely\n2. Reopen VSCode\n3. Start a new Roo Code session (you can resume your previous task and try to run the command again, this time with Roo Code being able to see the output)", "metadata": {"path": "troubleshooting/shell-integration.md", "name": "shell-integration.md", "header1": "Terminal Shell Integration", "header2": "How to Fix \"Shell Integration Unavailable\""}}
{"content": "## Additional Troubleshooting for Windows Users  \nIf you're using Windows and still experiencing issues with shell integration after trying the previous steps, it's recommended you use Git Bash.  \n### Git Bash  \nGit Bash is a terminal emulator that provides a Unix-like command line experience on Windows. To use Git Bash, you need to:  \n1. Download and run the Git for Windows installer from [https://git-scm.com/downloads/win](https://git-scm.com/downloads/win)\n2. Quit and re-open VSCode\n3. Press `Ctrl + Shift + P` to open the Command Palette\n4. Type \"Terminal: Select Default Profile\" and choose it\n5. Select \"Git Bash\"  \n### PowerShell  \nIf you'd still like to use PowerShell, make sure you're using an updated version (at least v7+).\n- Check your current PowerShell version by running: `$PSVersionTable.PSVersion`\n- If your version is below 7, [update PowerShell](https://learn.microsoft.com/en-us/powershell/scripting/whats-new/migrating-from-windows-powershell-51-to-powershell-7?view=powershell-7.4#installing-powershell-7).  \n#### Understanding PowerShell Execution Policies  \nPowerShell uses execution policies to determine which scripts can run on your system. Here are the most common policies:  \n- `Restricted`: No PowerShell scripts can run. This is the default setting.\n- `AllSigned`: All scripts, including local ones, must be signed by a trusted publisher.\n- `RemoteSigned`: Scripts created locally can run, but scripts downloaded from the internet must be signed.\n- `Unrestricted`: No restrictions. Any script can run, though you will be warned before running internet-downloaded scripts.  \nFor development work in VSCode, the `RemoteSigned` policy is generally recommended. It allows locally created scripts to run without restrictions while maintaining security for downloaded scripts. To learn more about PowerShell execution policies and understand the security implications of changing them, visit Microsoft's documentation: [About Execution Policies](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies).  \n#### Steps to Change the Execution Policy  \n1. Open PowerShell as an Administrator: Press `Win + X` and select \"Windows PowerShell (Administrator)\" or \"Windows Terminal (Administrator)\".  \n2. Check Current Execution Policy by running this command:\n```powershell\nGet-ExecutionPolicy\n```\n- If the output is already `RemoteSigned`, `Unrestricted`, or `Bypass`, you likely don't need to change your execution policy. These policies should allow shell integration to work.\n- If the output is `Restricted` or `AllSigned`, you may need to change your policy to enable shell integration.  \n3. Change the Execution Policy by running the following command:\n```powershell\nSet-ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n- This sets the policy to `RemoteSigned` for the current user only, which is safer than changing it system-wide.  \n4. Confirm the Change by typing `Y` and pressing Enter when prompted.  \n5. Verify the Policy Change by running `Get-ExecutionPolicy` again to confirm the new setting.  \n6. Restart VSCode and try the shell integration again.", "metadata": {"path": "troubleshooting/shell-integration.md", "name": "shell-integration.md", "header1": "Terminal Shell Integration", "header2": "Additional Troubleshooting for Windows Users"}}
{"content": "## Manual Shell Integration Installation  \nIf you're still experiencing issues after trying the basic troubleshooting steps, you can try manually installing shell integration:  \n### Installation Instructions  \nFor Bash users:\n1. Run `code ~/.bashrc` in the terminal to open your bash configuration file.\n2. Add the following line to your `~/.bashrc`:\n```bash\n[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path bash)\"\n```  \nFor Zsh users:\n1. Run `code ~/.zshrc` in the terminal to open your zsh configuration file.\n2. Add the following line to your `~/.zshrc`:\n```bash\n[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path zsh)\"\n```  \nFor PowerShell users:\n1. Run `code $Profile` in the terminal to open your PowerShell profile.\n2. Add the following line to the file:\n```powershell\nif ($env:TERM_PROGRAM -eq \"vscode\") { . \"$(code --locate-shell-integration-path pwsh)\" }\n```  \nFor Fish users:\n1. Run `code ~/.config/fish/config.fish` in the terminal to open your fish configuration file.\n2. Add the following line to your `~/.config/fish/config.fish`:\n```fish\nstring match -q \"$TERM_PROGRAM\" \"vscode\"; and . (code --locate-shell-integration-path fish)\n```  \n### About the Shell Integration Path Command  \nThe `code --locate-shell-integration-path` command returns the path to shell-specific integration scripts. It supports four shell types:\n- bash - returns path to `shellIntegration-bash.sh`\n- zsh - returns path to `shellIntegration-rc.zsh`\n- pwsh - returns path to `shellIntegration.ps1`\n- fish - returns path to `shellIntegration.fish`  \nAny other value will throw an error: \"Error using `--locate-shell-integration-path`: Invalid shell type\".", "metadata": {"path": "troubleshooting/shell-integration.md", "name": "shell-integration.md", "header1": "Terminal Shell Integration", "header2": "Manual Shell Integration Installation"}}
{"content": "## Unusual Terminal Output  \nIf you're seeing unusual output with rectangles, lines, escape sequences, or control characters, it may be related to terminal customization tools. Common culprits include:  \n- Powerlevel10k: A zsh theme that adds visual elements to the prompt. If using Powerlevel10k, you must set `typeset -g POWERLEVEL9K_TERM_SHELL_INTEGRATION=true` in your `~/.zshrc` before sourcing the theme. This enables proper integration with VSCode's shell integration, which differs from the integration provided by VSCE.\n- Oh My Zsh: A framework for managing zsh configurations\n- Fish shell themes  \nTo troubleshoot:  \n1. For Powerlevel10k users:\n```bash\n# Add this line before sourcing powerlevel10k in ~/.zshrc\ntypeset -g POWERLEVEL9K_TERM_SHELL_INTEGRATION=true\n```  \n2. If issues persist, temporarily disable these tools in your shell configuration file (e.g., `~/.zshrc` for Zsh)\n3. If the issue resolves, gradually re-enable features to identify the conflicting component", "metadata": {"path": "troubleshooting/shell-integration.md", "name": "shell-integration.md", "header1": "Terminal Shell Integration", "header2": "Unusual Terminal Output"}}
{"content": "## Advanced Troubleshooting  \n### Shell Integration Not Available  \nShell integration activation sequence (`\\x1b]633;A\\x07`) was not received. Shell integration features are disabled. Verify you are using a supported shell (Bash, Zsh, PowerShell, Fish) and shell integration is enabled in settings.  \n### Command Stream Not Available  \nCommand stream failed: missing start sequence (`\\x1b]633;C\\x07`) or command already ended (`\\x1b]633;D\\x07`). Command output cannot be captured. Check if the command started correctly or has completed execution.  \n### Verifying Shell Integration Status  \nRun these commands to verify shell integration sequences are installed:  \n#### Bash\n```bash\n# View all shell integration sequences\nset | grep -i '[16]33;'\n\n# Should show VSCode shell integration functions like:\n# printf '\\e]633;E;%s;%s\\a' - Command line set\n# printf '\\e]633;C\\a' - Command executed\n# printf '\\e]633;D\\a' - Command finished\n# printf '\\e]633;B\\a' - Command start\n# printf '\\e]633;A\\a' - Shell integration activated\n# printf '\\e]633;P;Prompt=%s\\a' - Prompt marker\n\n# Check for PROMPT_COMMAND and DEBUG trap\necho \"$PROMPT_COMMAND\" | grep vsc\ntrap -p DEBUG | grep vsc\n```  \n#### Zsh\n```zsh\n# List all VSCode shell integration functions\nfunctions | grep -i vsc  # Should show __vsc_precmd, __vsc_preexec, etc.\n\n# Verify shell integration hooks are installed\ntypeset -p precmd_functions preexec_functions  # Should include __vsc_precmd and __vsc_preexec\n\n# Check Powerlevel10k integration (if installed)\n(( ${+functions[p10k]} )) && typeset -p POWERLEVEL9K_TERM_SHELL_INTEGRATION  # Should show \"true\"\n```  \n#### PowerShell\n```powershell\n# View shell integration functions\nGet-Command -Name \"*VSC*\" -CommandType Function\n\n# Check prompt function\nGet-Content Function:\\Prompt | Select-String \"VSCode\"\n```  \n#### Fish\n```fish\n# Check for shell integration functions\nfunctions | grep -i vsc\n\n# Verify fish_prompt and fish_preexec hooks\nfunctions fish_prompt | grep -i vsc\nfunctions fish_preexec | grep -i vsc\n```  \nVisual indicators of active shell integration:\n1. Shell integration indicator in terminal title bar\n2. Command detection highlighting\n3. Working directory updates in terminal title\n4. Command duration reporting\n5. Exit code reporting for failed commands", "metadata": {"path": "troubleshooting/shell-integration.md", "name": "shell-integration.md", "header1": "Terminal Shell Integration", "header2": "Advanced Troubleshooting"}}
{"content": "## Troubleshooting Terminal Execution Failures  \nIf commands that previously worked suddenly stop working:\n1. Close the current terminal\n2. Let Roo Code open a new terminal for you\n3. Try your command again  \nThis often resolves temporary shell integration issues. However, if you experience persistent terminal execution failures and can reliably reproduce the problem, please [open a ticket](https://github.com/RooVetGit/Roo-Code/issues/new) with:\n- A step-by-step reproduction of the problem\n- Your operating system and VSCode/Cursor version\n- The shell you're using (Bash, Zsh, PowerShell, Fish)\n- Any relevant error messages or terminal output  \nThis will help us investigate and fix the underlying issue.", "metadata": {"path": "troubleshooting/shell-integration.md", "name": "shell-integration.md", "header1": "Terminal Shell Integration", "header2": "Troubleshooting Terminal Execution Failures"}}
{"content": "## Known Issues  \n### Incomplete Terminal Output  \nThere is an ongoing issue in VSCode where terminal command output may not be completely captured by extensions like Roo Code. This can result in:\n- Missing portions of command output\n- Incomplete error messages\n- Delayed or missing command completion signals  \nIf you experience this issue, try:\n1. Closing and reopening the terminal\n2. Running the command again\n3. If the problem persists, you may need to manually copy-paste relevant output to Roo Code", "metadata": {"path": "troubleshooting/shell-integration.md", "name": "shell-integration.md", "header1": "Terminal Shell Integration", "header2": "Known Issues"}}
{"content": "## Troubleshooting Resources  \n- [VSCode Terminal Output Issue #237208](https://github.com/microsoft/vscode/issues/237208): Tracking the incomplete terminal output capture issue (ongoing as of March 8, 2025)\n- [VSCode Terminal Integration Test Repository](https://github.com/KJ7LNW/vsce-test-terminal-integration): A tool for validating shell integration functionality in your environment\n- [Shell Integration Improvements PR](https://github.com/cline/cline/pull/1089): Enhanced shell integration behavior (merged in Roo Code as of March 8, 2025, pending merge in Cline)\n- [Roo Code Shell Integration Architecture PR](https://github.com/RooVetGit/Roo-Code/pull/1365): Detailed discussion and proposed architectural changes for more reliable shell integration (pending as of March 8, 2025)", "metadata": {"path": "troubleshooting/shell-integration.md", "name": "shell-integration.md", "header1": "Terminal Shell Integration", "header2": "Troubleshooting Resources"}}
{"content": "## Support  \nIf you've followed these steps and are still experiencing problems, please:  \n1. Check the [Roo Code GitHub Issues](https://github.com/RooVetGit/Roo-Code/issues) to see if others have reported similar problems\n2. If not, create a new issue with details about your operating system, VSCode/Cursor version, and the steps you've tried  \nFor additional help, join our [Discord](https://discord.gg/roocode).", "metadata": {"path": "troubleshooting/shell-integration.md", "name": "shell-integration.md", "header1": "Terminal Shell Integration", "header2": "Support"}}
{"content": "# Checkpoints  \nCheckpoints allow you to save the state of your project at a specific point in time during a task. This enables you to easily revert to a previous state if needed, providing a safety net for complex or potentially risky operations.", "metadata": {"path": "advanced-usage/checkpoints.md", "name": "checkpoints.md", "header1": "Checkpoints"}}
{"content": "## How Checkpoints Work  \nWhen checkpoints are enabled, Roo Code automatically creates a new checkpoint whenever:  \n*   A task is started.\n*   A file is created, modified, or deleted.\n*   A command is executed.", "metadata": {"path": "advanced-usage/checkpoints.md", "name": "checkpoints.md", "header1": "Checkpoints", "header2": "How Checkpoints Work"}}
{"content": "## Viewing Checkpoints  \nYou can view the list of checkpoints for a task in the chat history.", "metadata": {"path": "advanced-usage/checkpoints.md", "name": "checkpoints.md", "header1": "Checkpoints", "header2": "Viewing Checkpoints"}}
{"content": "## Restoring a Checkpoint  \nTo restore a checkpoint:  \n1.  **Open the chat view.**\n2.  **Find the checkpoint** you want to restore in the chat history.\n3.  **Click on the restore button**  \nThis will revert all files in your project to their state at that checkpoint.  \n**Note:**  Restoring a checkpoint will overwrite any changes you've made since that checkpoint.  It's recommended to commit your work before restoring a checkpoint.", "metadata": {"path": "advanced-usage/checkpoints.md", "name": "checkpoints.md", "header1": "Checkpoints", "header2": "Restoring a Checkpoint"}}
{"content": "## Limitations  \n*   Checkpoints are only created during active Roo Code tasks. Changes made outside of a task will not be captured.", "metadata": {"path": "advanced-usage/checkpoints.md", "name": "checkpoints.md", "header1": "Checkpoints", "header2": "Limitations"}}
{"content": "## Enabling/Disabling Checkpoints  \nYou can enable or disable checkpoints in the Roo Code settings.  Look for the \"Enable automatic checkpoints\" checkbox under Advanced Settings.", "metadata": {"path": "advanced-usage/checkpoints.md", "name": "checkpoints.md", "header1": "Checkpoints", "header2": "Enabling/Disabling Checkpoints"}}
{"content": "# Experimental Features  \nRoo Code includes experimental features that are still under development.  These features may be unstable, change significantly, or be removed in future versions.  Use them with caution and be aware that they may not work as expected.  \n**Warning:** Experimental features may have unexpected behavior, including potential data loss or security vulnerabilities.  Enable them at your own risk.", "metadata": {"path": "advanced-usage/experimental-features.md", "name": "experimental-features.md", "header1": "Experimental Features"}}
{"content": "## Enabling Experimental Features  \nTo enable or disable experimental features:  \n1.  Open the Roo Code settings (<Codicon name=\"gear\" /> icon in the top right corner).\n2.  Go to the \"Advanced Settings\" section.\n3.  Find the \"Experimental Features\" section.\n4.  Check or uncheck the boxes for the features you want to enable or disable.\n5.  Click \"Done\" to save your changes.", "metadata": {"path": "advanced-usage/experimental-features.md", "name": "experimental-features.md", "header1": "Experimental Features", "header2": "Enabling Experimental Features"}}
{"content": "## Current Experimental Features  \nThe following experimental features are currently available:  \n### Unified Diff Editing Strategy  \nThis is an alternate diff editing strategy to the standard search-and-replace algorithm. It evaluates multiple different approaches to applying a unified diff to a file, and selects the best approach for the given file.  \n**Note:** You must have \"Enable editing through diffs\" checked to use this feature.  \n### Checkpoints (Version Control)  \nThis will automatically save a checkpoint to git whenever you make changes to files.  \nThis lets you easily restore a previous state of the files if anything goes wrong.  \n### Search and Replace  \nAdds a new tool for searching and replacing text in a file.  \n### Insert Content  \nAdds a new tool for inserting content at any position in a file.  \n### Power Steering  \nWhen enabled, Roo will remind the model about the details of its current mode definition more frequently. This will lead to stronger adherence to role definitions and custom instructions, but will use more tokens per message.", "metadata": {"path": "advanced-usage/experimental-features.md", "name": "experimental-features.md", "header1": "Experimental Features", "header2": "Current Experimental Features"}}
{"content": "## Providing Feedback  \nIf you encounter any issues with experimental features, or if you have suggestions for improvements, please report them on the [Roo Code GitHub Issues page](https://github.com/RooVetGit/Roo-Code/issues).  \nYour feedback is valuable and helps us improve Roo Code!", "metadata": {"path": "advanced-usage/experimental-features.md", "name": "experimental-features.md", "header1": "Experimental Features", "header2": "Providing Feedback"}}
{"content": "# API Configuration Profiles  \nAPI Configuration Profiles allow you to create and switch between different sets of AI settings. Each profile can have different configurations for each mode, letting you optimize your experience based on the task at hand.", "metadata": {"path": "advanced-usage/api-configuration-profiles.md", "name": "api-configuration-profiles.md", "header1": "API Configuration Profiles"}}
{"content": "## How It Works  \nConfiguration profiles can have their own:\n- API providers (OpenAI, Anthropic, etc.)\n- API keys\n- Model selections\n- Temperature settings\n- Thinking budgets  \nThis lets you optimize your model configuration for different modes. For instance, you might want Architect and Debug mode to use a more powerful/expensive model to come up with a great plan, while Code mode uses a more standard coding model.", "metadata": {"path": "advanced-usage/api-configuration-profiles.md", "name": "api-configuration-profiles.md", "header1": "API Configuration Profiles", "header2": "How It Works"}}
{"content": "## Setting Up Profiles  \n1. Open Settings \u2192 Providers\n2. Choose a Configuration Profile from the dropdown, or create a new one\n3. Configure the profile's provider, model, key, and parameters", "metadata": {"path": "advanced-usage/api-configuration-profiles.md", "name": "api-configuration-profiles.md", "header1": "API Configuration Profiles", "header2": "Setting Up Profiles"}}
{"content": "## Linking Profiles to Modes  \nIn the <Codicon name=\"notebook\" /> Prompts tab, you can associate a Configuration Profile with each Mode.", "metadata": {"path": "advanced-usage/api-configuration-profiles.md", "name": "api-configuration-profiles.md", "header1": "API Configuration Profiles", "header2": "Linking Profiles to Modes"}}
{"content": "## Benefits  \n- **Cost optimization**: Use premium models only where they add the most value\n- **Performance tailoring**: Match model capabilities to each mode's specific needs\n- **Workflow optimization**: Seamless transitions between modes with appropriate settings", "metadata": {"path": "advanced-usage/api-configuration-profiles.md", "name": "api-configuration-profiles.md", "header1": "API Configuration Profiles", "header2": "Benefits"}}
{"content": "## Related Features  \n- Works with [custom modes](custom-modes)\n- Integrates with [local models](local-models) for offline work\n- Supports [temperature settings](model-temperature) per mode", "metadata": {"path": "advanced-usage/api-configuration-profiles.md", "name": "api-configuration-profiles.md", "header1": "API Configuration Profiles", "header2": "Related Features"}}
{"content": "# Using Local Models  \nRoo Code supports running language models locally on your own machine using [Ollama](https://ollama.com/) and [LM Studio](https://lmstudio.ai/).  This offers several advantages:  \n*   **Privacy:** Your code and data never leave your computer.\n*   **Offline Access:**  You can use Roo Code even without an internet connection.\n*   **Cost Savings:**  Avoid API usage fees associated with cloud-based models.\n*   **Customization:**  Experiment with different models and configurations.  \n**However, using local models also has some drawbacks:**  \n*   **Resource Requirements:**  Local models can be resource-intensive, requiring a powerful computer with a good CPU and, ideally, a dedicated GPU.\n*   **Setup Complexity:**  Setting up local models can be more complex than using cloud-based APIs.\n*   **Model Performance:**  The performance of local models can vary significantly. While some are excellent, they may not always match the capabilities of the largest, most advanced cloud models.\n* **Limited Features**: Local models (and many online models) often do not support advanced features such as prompt caching, computer use, and others.", "metadata": {"path": "advanced-usage/local-models.md", "name": "local-models.md", "header1": "Using Local Models"}}
{"content": "## Supported Local Model Providers  \nRoo Code currently supports two main local model providers:  \n1.  **Ollama:**  A popular open-source tool for running large language models locally.  It supports a wide range of models.\n2.  **LM Studio:**  A user-friendly desktop application that simplifies the process of downloading, configuring, and running local models.  It also provides a local server that emulates the OpenAI API.", "metadata": {"path": "advanced-usage/local-models.md", "name": "local-models.md", "header1": "Using Local Models", "header2": "Supported Local Model Providers"}}
{"content": "## Setting Up Local Models  \nFor detailed setup instructions, see:  \n* [Setting up Ollama](/providers/ollama)\n* [Setting up LM Studio](/providers/lmstudio)  \nBoth providers offer similar capabilities but with different user interfaces and workflows. Ollama provides more control through its command-line interface, while LM Studio offers a more user-friendly graphical interface.", "metadata": {"path": "advanced-usage/local-models.md", "name": "local-models.md", "header1": "Using Local Models", "header2": "Setting Up Local Models"}}
{"content": "## Troubleshooting  \n*   **\"No connection could be made because the target machine actively refused it\":**  This usually means that the Ollama or LM Studio server isn't running, or is running on a different port/address than Roo Code is configured to use.  Double-check the Base URL setting.  \n*   **Slow Response Times:** Local models can be slower than cloud-based models, especially on less powerful hardware.  If performance is an issue, try using a smaller model.  \n*   **Model Not Found:** Ensure you have typed in the name of the model correctly. If you're using Ollama, use the same name that you provide in the `ollama run` command.", "metadata": {"path": "advanced-usage/local-models.md", "name": "local-models.md", "header1": "Using Local Models", "header2": "Troubleshooting"}}
{"content": "# Auto-Approving Actions  \nRoo Code can automatically approve certain actions without needing your explicit confirmation each time. This speeds up your workflow, but it's important to use this feature carefully.  **Always be mindful of the actions you're auto-approving, as they give Roo Code more control.**", "metadata": {"path": "advanced-usage/auto-approving-actions.md", "name": "auto-approving-actions.md", "header1": "Auto-Approving Actions"}}
{"content": "## The Auto-Approve Toolbar  \nThe easiest way to manage auto-approval settings is through the **Auto-Approve Toolbar**, located in the toolbar directly above the chat input box:  \n1.  **Open the Auto-Approve Toolbar:** Click on the toolbar to expand it.\n2.  **Check/Uncheck Actions:**  A menu will appear with checkboxes for different action types. Check the actions you want Roo Code to perform automatically, and uncheck the ones you want to approve manually.  \nThe available auto-approval options are:  \n*   **Read Files:** Allows Roo Code to read files and directories without confirmation.\n*   **Edit Files:** Allows Roo Code to create, modify, and delete files. **Use with caution!**\n*   **Run Commands:** Allows Roo Code to execute terminal commands. **Use with caution!**  You can restrict this to a specific list of allowed commands in the settings.\n*   **Use Browser:** Allows Roo Code to perform actions in a headless browser, such as opening web pages and interacting with elements.\n*   **Use MCP:** Allows Roo Code to interact with configured MCP servers.\n*   **Switch Modes:** Allows Roo Code to switch modes automatically.\n*   **Retry Requests:** Allows Roo Code to automatically retry failed API requests.  \n**When an action is auto-approved, Roo Code will proceed without showing you a confirmation prompt.**", "metadata": {"path": "advanced-usage/auto-approving-actions.md", "name": "auto-approving-actions.md", "header1": "Auto-Approving Actions", "header2": "The Auto-Approve Toolbar"}}
{"content": "## Top-Level Toggle  \nAt the top of the Auto-Approve Toolbar is a toggle to enable/disable auto-approval overall. When this is disabled, none of the actions will be auto-approved. You can use this to quickly disable auto-approval when you don't want Roo Code to take certain actions automatically.", "metadata": {"path": "advanced-usage/auto-approving-actions.md", "name": "auto-approving-actions.md", "header1": "Auto-Approving Actions", "header2": "Top-Level Toggle"}}
{"content": "## Advanced Configuration (Settings)  \nYou can also find these auto-approval options in the Roo Code settings panel (<Codicon name=\"gear\" /> in the top right corner).  The settings panel provides the same functionality as the auto-approve menu, but in a different location.  The auto-approve menu is generally the quickest way to change these settings.", "metadata": {"path": "advanced-usage/auto-approving-actions.md", "name": "auto-approving-actions.md", "header1": "Auto-Approving Actions", "header2": "Advanced Configuration (Settings)"}}
{"content": "## Security Considerations  \n*   **Start Slowly:** Begin by auto-approving only read-only operations.  As you become more comfortable with Roo Code, you can gradually enable other actions.\n*   **Review Regularly:**  Periodically review your auto-approval settings to make sure they still align with your needs and security preferences.\n* **Allowed Commands:** You can limit which commands can be auto-executed. Go to `Settings > Auto-Approve Settings` to find and modify the list of allowed command prefixes.  \nBy understanding and carefully configuring auto-approval, you can optimize Roo Code's performance while maintaining control over your system.", "metadata": {"path": "advanced-usage/auto-approving-actions.md", "name": "auto-approving-actions.md", "header1": "Auto-Approving Actions", "header2": "Security Considerations"}}
{"content": "# Working with Large Projects  \nRoo Code can be used with projects of any size, but large projects require some extra care to manage context effectively. Here are some tips for working with large codebases:", "metadata": {"path": "advanced-usage/large-projects.md", "name": "large-projects.md", "header1": "Working with Large Projects"}}
{"content": "## Understanding Context Limits  \nRoo Code uses large language models (LLMs) that have a limited \"context window.\"  This is the maximum amount of text (measured in tokens) that the model can process at once.  If the context is too large, the model may not be able to understand your request or generate accurate responses.  \nThe context window includes:  \n*   The system prompt (instructions for Roo Code).\n*   The conversation history.\n*   The content of any files you mention using `@`.\n*   The output of any commands or tools Roo Code uses.", "metadata": {"path": "advanced-usage/large-projects.md", "name": "large-projects.md", "header1": "Working with Large Projects", "header2": "Understanding Context Limits"}}
{"content": "## Strategies for Managing Context  \n1.  **Be Specific:**  When referring to files or code, use specific file paths and function names.  Avoid vague references like \"the main file.\"  \n2.  **Use Context Mentions Effectively:** Use `@/path/to/file.ts` to include specific files. Use `@problems` to include current errors and warnings.  Use `@` followed by a commit hash to reference specific Git commits.  \n3.  **Break Down Tasks:** Divide large tasks into smaller, more manageable sub-tasks.  This helps keep the context focused.  \n4.  **Summarize:**  If you need to refer to a large amount of code, consider summarizing the relevant parts in your prompt instead of including the entire code.  \n5.  **Prioritize Recent History:** Roo Code automatically truncates older messages in the conversation history to stay within the context window. Be mindful of this, and re-include important context if needed.  \n6.  **Use Prompt Caching (if available):** Some API providers like OpenRouter support \"prompt caching\". This caches your prompts for use in future tasks and helps reduce the cost and latency of requests.", "metadata": {"path": "advanced-usage/large-projects.md", "name": "large-projects.md", "header1": "Working with Large Projects", "header2": "Strategies for Managing Context"}}
{"content": "## Example: Refactoring a Large File  \nLet's say you need to refactor a large TypeScript file (`src/components/MyComponent.tsx`).  Here's a possible approach:  \n1.  **Initial Overview:**\n```\n@/src/components/MyComponent.tsx List the functions and classes in this file.\n```  \n2.  **Target Specific Functions:**\n```\n@/src/components/MyComponent.tsx Refactor the `processData` function to use `async/await` instead of Promises.\n```  \n3.  **Iterative Changes:**  Make small, incremental changes, reviewing and approving each step.  \nBy breaking down the task and providing specific context, you can work effectively with large files even with a limited context window.", "metadata": {"path": "advanced-usage/large-projects.md", "name": "large-projects.md", "header1": "Working with Large Projects", "header2": "Example: Refactoring a Large File"}}
{"content": "# Enhance Prompt  \nThe \"Enhance Prompt\" feature in Roo Code helps you improve the quality and effectiveness of your prompts before sending them to the AI model.  By clicking the \u2728 (sparkle) icon in the chat input, you can automatically refine your initial request, making it clearer, more specific, and more likely to produce the desired results.", "metadata": {"path": "advanced-usage/enhance-prompt.md", "name": "enhance-prompt.md", "header1": "Enhance Prompt"}}
{"content": "## Why Use Enhance Prompt?  \n*   **Improved Clarity:**  Roo Code can rephrase your prompt to make it more understandable for the AI model.\n*   **Added Context:**  The enhancement process can add relevant context to your prompt, such as the current file path or selected code.\n*   **Better Instructions:**  Roo Code can add instructions to guide the AI towards a more helpful response (e.g., requesting specific formatting or a particular level of detail).\n*   **Reduced Ambiguity:**  Enhance Prompt helps to eliminate ambiguity and ensure that Roo Code understands your intent.\n*   **Consistency**: Roo will consistently format prompts the same way to the AI.", "metadata": {"path": "advanced-usage/enhance-prompt.md", "name": "enhance-prompt.md", "header1": "Enhance Prompt", "header2": "Why Use Enhance Prompt?"}}
{"content": "## How to Use Enhance Prompt  \n1.  **Type your initial prompt:**  Enter your request in the Roo Code chat input box as you normally would.  This can be a simple question, a complex task description, or anything in between.\n2.  **Click the <Codicon name=\"sparkle\" /> Icon:**  Instead of pressing Enter, click the <Codicon name=\"sparkle\" /> icon located to the left of the chat input box.\n3.  **Review the Enhanced Prompt:**  Roo Code will replace your original prompt with an enhanced version.  Review the enhanced prompt to make sure it accurately reflects your intent. You can further refine the enhanced prompt before sending.\n4.  **Send the Enhanced Prompt:**  Press Enter or click the Send icon (<Codicon name=\"send\" />) to send the enhanced prompt to Roo Code.", "metadata": {"path": "advanced-usage/enhance-prompt.md", "name": "enhance-prompt.md", "header1": "Enhance Prompt", "header2": "How to Use Enhance Prompt"}}
{"content": "## Customizing the Enhancement Process  \nThe \"Enhance Prompt\" feature uses a customizable prompt template.  You can modify this template to tailor the enhancement process to your specific needs.  \n1.  **Open the Prompts Tab:** Click the <Codicon name=\"notebook\" /> icon in the Roo Code top menu bar.\n2.  **Select \"ENHANCE\" Tab:** You should see listed out support prompts, including \"ENHANCE\". Click on this tab.\n3.  **Edit the Prompt Template:** Modify the text in the \"Prompt\" field.  \nThe default prompt template includes the placeholder `${userInput}`, which will be replaced with your original prompt. You can modify this to fit the model's prompt format, and instruct it how to enhance your request.", "metadata": {"path": "advanced-usage/enhance-prompt.md", "name": "enhance-prompt.md", "header1": "Enhance Prompt", "header2": "Customizing the Enhancement Process"}}
{"content": "## API Configuration  \nThe API configuration used for Enhance Prompt is, by default, the same one that is selected for Roo Code tasks,\nbut it can be changed:  \n1.  **Open the Prompts Tab:** Click the <Codicon name=\"notebook\" /> icon in the Roo Code top menu bar.\n2.  **Select \"ENHANCE\" Tab:** You should see an \"API Configuration\" dropdown\n3.  **Select an API Configuration:** Choose an existing configuration, and future Enhance Prompt requests will be sent to that configured provider/model.", "metadata": {"path": "advanced-usage/enhance-prompt.md", "name": "enhance-prompt.md", "header1": "Enhance Prompt", "header2": "API Configuration"}}
{"content": "## Limitations and Best Practices  \n*   **Experimental Feature:**  Prompt enhancement is an experimental feature. The quality of the enhanced prompt may vary depending on the complexity of your request and the capabilities of the underlying model.\n*   **Review Carefully:**  Always review the enhanced prompt before sending it.  Roo Code may make changes that don't align with your intentions.\n*   **Iterative Process:**  You can use the \"Enhance Prompt\" feature multiple times to iteratively refine your prompt.\n*   **Not a Replacement for Clear Instructions:** While \"Enhance Prompt\" can help, it's still important to write clear and specific prompts from the start.  \nBy using the \"Enhance Prompt\" feature, you can improve the quality of your interactions with Roo Code and get more accurate and helpful responses.", "metadata": {"path": "advanced-usage/enhance-prompt.md", "name": "enhance-prompt.md", "header1": "Enhance Prompt", "header2": "Limitations and Best Practices"}}
{"content": "# Code Actions  \nCode Actions are a powerful feature of VS Code that provide quick fixes, refactorings, and other code-related suggestions directly within the editor. Roo Code integrates with this system to offer AI-powered assistance for common coding tasks.", "metadata": {"path": "advanced-usage/code-actions.md", "name": "code-actions.md", "header1": "Code Actions"}}
{"content": "## What are Code Actions?  \nCode Actions appear as a lightbulb icon (\ud83d\udca1) in the editor gutter (the area to the left of the line numbers). They can also be accessed via the right-click context menu, or via keyboard shortcut. They are triggered when:  \n*   You select a range of code.\n*   Your cursor is on a line with a problem (error, warning, or hint).\n*   You invoke them via command.  \nClicking the lightbulb, right-clicking and selecting \"Roo Code\", or using the keyboard shortcut (`Ctrl+.` or `Cmd+.` on macOS, by default), displays a menu of available actions.", "metadata": {"path": "advanced-usage/code-actions.md", "name": "code-actions.md", "header1": "Code Actions", "header2": "What are Code Actions?"}}
{"content": "## Roo Code's Code Actions  \nRoo Code provides the following Code Actions:  \n*   **Explain Code:** Asks Roo Code to explain the selected code. This is useful for understanding unfamiliar code or for getting a high-level overview of a function or class.\n*   **Fix Code:** Asks Roo Code to fix problems in the selected code. This action is available when there are diagnostics (errors or warnings) on the selected lines. Roo Code will analyze the diagnostics and propose a fix.\n*   **Improve Code:** Asks Roo Code to suggest improvements to the selected code. This can include suggestions for better readability, performance, or adherence to best practices.\n*   **Add to Context:** Adds the selected code to the current Roo Code conversation, allowing you to refer to it in subsequent messages.  \nEach of these actions can be performed \"in a new task\" or \"in the current task.\"", "metadata": {"path": "advanced-usage/code-actions.md", "name": "code-actions.md", "header1": "Code Actions", "header2": "Roo Code's Code Actions"}}
{"content": "## Using Code Actions  \nThere are three main ways to use Roo Code's Code Actions:  \n### 1. From the Lightbulb (\ud83d\udca1)  \n1.  **Select Code:** Select the code you want to work with. You can select a single line, multiple lines, or an entire block of code.\n2.  **Look for the Lightbulb:** A lightbulb icon will appear in the gutter next to the selected code (or the line with the error/warning).\n3.  **Click the Lightbulb:** Click the lightbulb icon to open the Code Actions menu.\n4.  **Choose an Action:** Select the desired Roo Code action from the menu.\n5.  **Review and Approve:** Roo Code will propose a solution in the chat panel. Review the proposed changes and approve or reject them.  \n### 2. From the Right-Click Context Menu  \n1.  **Select Code:** Select the code you want to work with.\n2.  **Right-Click:** Right-click on the selected code to open the context menu.\n3.  **Choose \"Roo Code\":** Select the \"Roo Code\" option from the context menu. A submenu will appear with the available Roo Code actions.\n4.  **Choose an Action:** Select the desired action from the submenu.\n5.  **Review and Approve:** Roo Code will propose a solution in the chat panel. Review the proposed changes and approve or reject them.  \n### 3. From the Command Palette  \n1.  **Select Code:** Select the code you want to work with.\n2.  **Open the Command Palette:** Press `Ctrl+Shift+P` (Windows/Linux) or `Cmd+Shift+P` (macOS).\n3.  **Type a Command:** Type \"Roo Code\" to filter the commands, then choose the relevant code action (e.g., \"Roo Code: Explain Code\"). You can also type the start of the command, like \"Roo Code: Explain\", and select from the filtered list.\n4.  **Review and Approve:** Roo Code will propose a solution in the chat panel. Review the proposed changes and approve or reject them.", "metadata": {"path": "advanced-usage/code-actions.md", "name": "code-actions.md", "header1": "Code Actions", "header2": "Using Code Actions"}}
{"content": "## Code Actions and Current Task  \nEach code action gives you two options:  \n*   **in New Task:** Select this to begin a conversation with Roo centered around this code action.\n*   **in Current Task:** If a conversation has already begun, this option will add the code action as an additional message.", "metadata": {"path": "advanced-usage/code-actions.md", "name": "code-actions.md", "header1": "Code Actions", "header2": "Code Actions and Current Task"}}
{"content": "## Customizing Code Action Prompts  \nYou can customize the prompts used for each Code Action by modifying the \"Support Prompts\" in the **Prompts** tab.  This allows you to fine-tune the instructions given to the AI model and tailor the responses to your specific needs.  \n1.  **Open the Prompts Tab:** Click the <Codicon name=\"notebook\" /> icon in the Roo Code top menu bar.\n2. **Find \"Support Prompts\":** You will see the support prompts, including \"Enhance Prompt\", \"Explain Code\", \"Fix Code\", and \"Improve Code\".\n3. **Edit the Prompts:**  Modify the text in the text area for the prompt you want to customize. You can use placeholders like `${filePath}` and `${selectedText}` to include information about the current file and selection.\n4. **Click \"Done\":** Save your changes.  \nBy using Roo Code's Code Actions, you can quickly get AI-powered assistance directly within your coding workflow. This can save you time and help you write better code.", "metadata": {"path": "advanced-usage/code-actions.md", "name": "code-actions.md", "header1": "Code Actions", "header2": "Customizing Code Action Prompts"}}
{"content": "# Adjusting Model Temperature  \nRoo Code allows you to control the \"temperature\" setting for your AI models. Temperature is a crucial parameter that influences the randomness and creativity of the model's output.  Understanding and adjusting temperature is particularly useful for getting the best results from different modes, like **Architect** and **Ask**, where more creative or varied responses might be desired.", "metadata": {"path": "advanced-usage/model-temperature.md", "name": "model-temperature.md", "header1": "Adjusting Model Temperature"}}
{"content": "## What is Temperature?  \nTemperature is a parameter that controls the randomness of the model's predictions. It's a value, typically between 0.0 and 1.0 (though some providers might accept different value ranges).  \n*   **Lower Temperature (closer to 0.0):** The model becomes more deterministic and focused. It will select the most probable, predictable outputs. This is good for tasks requiring precision and correctness, like code generation.\n*   **Higher Temperature (closer to 1.0):** The model becomes more creative and unpredictable. It will explore less likely, more diverse outputs. This is useful for brainstorming, generating different variations of text, or exploring different design options.", "metadata": {"path": "advanced-usage/model-temperature.md", "name": "model-temperature.md", "header1": "Adjusting Model Temperature", "header2": "What is Temperature?"}}
{"content": "## Why Adjust Temperature?  \nDifferent tasks benefit from different temperature settings.  For example:  \n*   **Code Mode (Low Temperature):** When writing code, you generally want precise and correct results.  A lower temperature (e.g., 0.0 - 0.3) is usually best.\n*   **Architect Mode (Medium Temperature):** When brainstorming architectural designs, you might want more creative suggestions.  A medium temperature (e.g., 0.4 - 0.7) can be helpful.\n*   **Ask Mode (Medium to High Temperature):** When asking open-ended questions or seeking explanations, a higher temperature (e.g., 0.7 - 1.0) can lead to more diverse and insightful responses.  You might even go higher for creative writing tasks.\n*   **Debug Mode (Low Temperature):** When tracking down bugs, you want precise and correct results.  A lower temperature (e.g., 0.0 - 0.3) is usually best.", "metadata": {"path": "advanced-usage/model-temperature.md", "name": "model-temperature.md", "header1": "Adjusting Model Temperature", "header2": "Why Adjust Temperature?"}}
{"content": "## How to Adjust Temperature in Roo Code  \nYou can adjust the temperature in the Roo Code settings:  \n1.  **Open the Roo Code Panel:** Click the Roo Code icon (<Codicon name=\"rocket\" />) in the VS Code Activity Bar.\n2.  **Open Settings:** Click the <Codicon name=\"gear\" /> icon in the top right corner of the Roo Code panel.\n3.  **Find the Temperature Setting:** In the settings panel, you'll find a \"Use custom temperature\" setting within the API configuration section.\n4.  **Enter the Temperature Value:** Check the box and enter the temperature value you want to use. The range is typically from 0.0 to 1.0, but this may depend on the specific model and provider.", "metadata": {"path": "advanced-usage/model-temperature.md", "name": "model-temperature.md", "header1": "Adjusting Model Temperature", "header2": "How to Adjust Temperature in Roo Code"}}
{"content": "## Per-API Configuration Profiles  \nRoo Code allows you to create multiple [API configuration profiles](api-configuration-profiles).  This is *very* useful for managing temperature settings. You can:  \n*   **Create a \"Code - Low Temp\" profile:** Configure this profile with your preferred API provider, a code-focused model (like Claude 3.5 Sonnet), and a low temperature (e.g., 0.1).\n*   **Create an \"Ask - High Temp\" profile:** Configure this profile with the same provider (or a different one), perhaps a model better suited for general knowledge, and a higher temperature (e.g., 0.8).\n*   **Switch Profiles:**  Use the \"Configuration Profile\" dropdown in the Roo Code settings to quickly switch between your saved configurations.  You can also set a default configuration for each mode (Code, Architect, Ask, Debug), so Roo Code automatically uses the appropriate settings when you switch modes.  \nThis lets you tailor the AI's behavior to the specific task at hand without constantly adjusting settings.", "metadata": {"path": "advanced-usage/model-temperature.md", "name": "model-temperature.md", "header1": "Adjusting Model Temperature", "header2": "Per-API Configuration Profiles"}}
{"content": "## Experimentation  \nThe best way to understand the effect of temperature is to experiment. Try different values and see how they impact the model's output, or do some research online. You may find that different temperatures work best for different tasks or even for different parts of the same task.", "metadata": {"path": "advanced-usage/model-temperature.md", "name": "model-temperature.md", "header1": "Adjusting Model Temperature", "header2": "Experimentation"}}
{"content": "# Custom Modes  \nRoo Code allows you to create **custom modes** to tailor Roo's behavior to specific tasks or workflows. Custom modes can be either **global** (available across all projects) or **project-specific** (defined within a single project).  They allow you to define:  \n*   **A unique name and slug:** For easy identification\n*   **A role definition:** Placed at the beginning of the system prompt, this defines Roo's core expertise and personality for the mode. This placement is crucial as it shapes Roo's fundamental understanding and approach to tasks\n*   **Custom instructions:** Added at the end of the system prompt, these provide specific guidelines that modify or refine Roo's behavior. Unlike `.clinerules` files (which only add rules at the end), this structured placement of role and instructions allows for more nuanced control over Roo's responses\n*   **Allowed tools:** Which Roo Code tools the mode can use (e.g., read files, write files, execute commands)\n*   **File restrictions:** (Optional) Limit file access to specific file types or patterns (e.g., only allow editing `.md` files)", "metadata": {"path": "advanced-usage/custom-modes.md", "name": "custom-modes.md", "header1": "Custom Modes"}}
{"content": "## Why Use Custom Modes?  \n*   **Specialization:** Create modes optimized for specific tasks, like \"Documentation Writer,\" \"Test Engineer,\" or \"Refactoring Expert\"\n*   **Safety:** Restrict a mode's access to sensitive files or commands. For example, a \"Review Mode\" could be limited to read-only operations\n*   **Experimentation:** Safely experiment with different prompts and configurations without affecting other modes\n*   **Team Collaboration:** Share custom modes with your team to standardize workflows", "metadata": {"path": "advanced-usage/custom-modes.md", "name": "custom-modes.md", "header1": "Custom Modes", "header2": "Why Use Custom Modes?"}}
{"content": "## Creating Custom Modes  \nYou have three options for creating custom modes:  \n### 1. Ask Roo! (Recommended)  \nYou can quickly create a basic custom mode by asking Roo Code to do it for you. For example:  \n> Create a new mode called \"Documentation Writer\". It should only be able to read files and write Markdown files.  \nRoo Code will guide you through the process. However, for fine-tuning modes or making specific adjustments, you'll want to use the Prompts tab or manual configuration methods described below.  \n### 2. Using the Prompts Tab  \n1.  **Open Prompts Tab:** Click the <Codicon name=\"notebook\" /> icon in the Roo Code top menu bar\n2.  **Create New Mode:** Click the <Codicon name=\"add\" /> button to the right of the Modes heading\n3.  **Fill in Fields:**\n* **Name:** Enter a display name for the mode\n* **Slug:** Enter a lowercase identifier (letters, numbers, and hyphens only)\n* **Save Location:** Choose Global (via `cline_custom_modes.json`, available across all workspaces) or Project-specific (via `.roomodes` file in project root)\n* **Role Definition:** Define Roo's expertise and personality for this mode (appears at the start of the system prompt)\n* **Available Tools:** Select which tools this mode can use\n* **Custom Instructions:** (Optional) Add behavioral guidelines specific to this mode (appears at the end of the system prompt)\n4.  **Create Mode:** Click the \"Create Mode\" button to save your new mode  \nNote: File type restrictions can only be added through manual configuration.  \n### 3. Manual Configuration  \nYou can configure custom modes by editing JSON files through the Prompts tab:  \nBoth global and project-specific configurations can be edited through the Prompts tab:  \n1.  **Open Prompts Tab:** Click the <Codicon name=\"notebook\" /> icon in the Roo Code top menu bar\n2.  **Access Settings Menu:** Click the <Codicon name=\"bracket\" /> button to the right of the Modes heading\n3.  **Choose Configuration:**\n* Select \"Edit Global Modes\" to edit `cline_custom_modes.json` (available across all workspaces)\n* Select \"Edit Project Modes\" to edit `.roomodes` file (in project root)\n4.  **Edit Configuration:** Modify the JSON file that opens\n5.  **Save Changes:** Roo Code will automatically detect the changes", "metadata": {"path": "advanced-usage/custom-modes.md", "name": "custom-modes.md", "header1": "Custom Modes", "header2": "Creating Custom Modes"}}
{"content": "## Configuration Precedence  \nMode configurations are applied in this order:  \n1. Project-level mode configurations (from `.roomodes`)\n2. Global mode configurations (from `cline_custom_modes.json`)\n3. Default mode configurations  \nThis means that project-specific configurations will override global configurations, which in turn override default configurations.", "metadata": {"path": "advanced-usage/custom-modes.md", "name": "custom-modes.md", "header1": "Custom Modes", "header2": "Configuration Precedence"}}
{"content": "## Custom Mode Configuration (JSON Format)  \nBoth global and project-specific configurations use the same JSON format. Each configuration file contains a `customModes` array of mode definitions:  \n```json\n{\n\"customModes\": [\n{\n\"slug\": \"mode-name\",\n\"name\": \"Mode Display Name\",\n\"roleDefinition\": \"Mode's role and capabilities\",\n\"groups\": [\"read\", \"edit\"],\n\"customInstructions\": \"Additional guidelines\"\n}\n]\n}\n```  \n### Required Properties  \n#### `slug`\n* A unique identifier for the mode\n* Use lowercase letters, numbers, and hyphens\n* Keep it short and descriptive\n* Example: `\"docs-writer\"`, `\"test-engineer\"`  \n#### `name`\n* The display name shown in the UI\n* Can include spaces and proper capitalization\n* Example: `\"Documentation Writer\"`, `\"Test Engineer\"`  \n#### `roleDefinition`\n* Detailed description of the mode's role and capabilities\n* Defines Roo's expertise and personality for this mode\n* Example: `\"You are a technical writer specializing in clear documentation\"`  \n#### `groups`\n* Array of allowed tool groups\n* Available groups: `\"read\"`, `\"edit\"`, `\"browser\"`, `\"command\"`, `\"mcp\"`\n* Can include file restrictions for the `\"edit\"` group  \n##### File Restrictions Format\n```json\n[\"edit\", {\n\"fileRegex\": \"\\\\.md$\",\n\"description\": \"Markdown files only\"\n}]\n```  \n### Optional Properties  \n#### `customInstructions`\n* Additional behavioral guidelines for the mode\n* Example: `\"Focus on explaining concepts and providing examples\"`  \n### Understanding File Restrictions  \nThe `fileRegex` property uses regular expressions to control which files a mode can edit:  \n* `\\\\.md$` - Match files ending in \".md\"\n* `\\\\.(test|spec)\\\\.(js|ts)$` - Match test files (e.g., \"component.test.js\")\n* `\\\\.(js|ts)$` - Match JavaScript and TypeScript files  \nCommon regex patterns:\n* `\\\\.` - Match a literal dot\n* `(a|b)` - Match either \"a\" or \"b\"\n* `$` - Match the end of the filename  \n[Learn more about regular expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)  \n### Example Configurations  \nEach example shows different aspects of mode configuration:  \n#### Basic Documentation Writer\n```json\n{\n\"customModes\": [{\n\"slug\": \"docs-writer\",\n\"name\": \"Documentation Writer\",\n\"roleDefinition\": \"You are a technical writer specializing in clear documentation\",\n\"groups\": [\n\"read\",\n[\"edit\", { \"fileRegex\": \"\\\\.md$\", \"description\": \"Markdown files only\" }]\n],\n\"customInstructions\": \"Focus on clear explanations and examples\"\n}]\n}\n```  \n#### Test Engineer with File Restrictions\n```json\n{\n\"customModes\": [{\n\"slug\": \"test-engineer\",\n\"name\": \"Test Engineer\",\n\"roleDefinition\": \"You are a test engineer focused on code quality\",\n\"groups\": [\n\"read\",\n[\"edit\", { \"fileRegex\": \"\\\\.(test|spec)\\\\.(js|ts)$\", \"description\": \"Test files only\" }]\n]\n}]\n}\n```  \n#### Project-Specific Mode Override\n```json\n{\n\"customModes\": [{\n\"slug\": \"code\",\n\"name\": \"Code (Project-Specific)\",\n\"roleDefinition\": \"You are a software engineer with project-specific constraints\",\n\"groups\": [\n\"read\",\n[\"edit\", { \"fileRegex\": \"\\\\.(js|ts)$\", \"description\": \"JS/TS files only\" }]\n],\n\"customInstructions\": \"Focus on project-specific JS/TS development\"\n}]\n}\n```\nBy following these instructions, you can create and manage custom modes to enhance your workflow with Roo-Code.", "metadata": {"path": "advanced-usage/custom-modes.md", "name": "custom-modes.md", "header1": "Custom Modes", "header2": "Custom Mode Configuration (JSON Format)"}}
{"content": "## Community Gallery  \nReady to explore more? Check out the [Custom Modes Gallery](/community#custom-modes-gallery) to discover and share custom modes created by the community!", "metadata": {"path": "advanced-usage/custom-modes.md", "name": "custom-modes.md", "header1": "Custom Modes", "header2": "Community Gallery"}}
{"content": "# Custom Instructions  \nRoo Code allows you to customize its behavior using custom instructions at both global and workspace levels. These instructions are added to the system prompt and influence how Roo Code responds to your requests. You can define:  \n* **Global Custom Instructions:** Apply across all workspaces\n* **Workspace-Level Instructions:**\n* **Workspace-Wide:** Apply to all modes in the workspace through `.clinerules` files\n* **Mode-Specific:** Apply to specific modes in the workspace through files like `.clinerules-code`", "metadata": {"path": "advanced-usage/custom-instructions.md", "name": "custom-instructions.md", "header1": "Custom Instructions"}}
{"content": "## Preferred Language  \nYou can specify a preferred language for Roo Code to use. When set, this appears at the start of your custom instructions and directs Roo Code to communicate in your chosen language. You can set this in the **Prompts** tab.", "metadata": {"path": "advanced-usage/custom-instructions.md", "name": "custom-instructions.md", "header1": "Custom Instructions", "header2": "Preferred Language"}}
{"content": "## Global Custom Instructions  \nThese instructions apply across all workspaces. They're useful for setting preferences that you want to maintain regardless of which project you're working on.  \n**How to set them:**  \n1.  **Open Prompts Tab:** Click the <Codicon name=\"notebook\" /> icon in the Roo Code top menu bar\n2.  **Find Section:** Find the \"Custom Instructions for All Modes\" section\n3.  **Enter Instructions:** Enter your instructions in the text area\n4.  **Save Changes:** Click \"Done\" to save your changes", "metadata": {"path": "advanced-usage/custom-instructions.md", "name": "custom-instructions.md", "header1": "Custom Instructions", "header2": "Global Custom Instructions"}}
{"content": "## Workspace-Level Instructions  \nThese instructions only apply within your current workspace, allowing you to customize Roo Code's behavior for specific projects.  \n### Workspace-Wide Instructions  \nWorkspace-wide instructions are defined through rule files in your workspace root, primarily using `.clinerules`. Additional support for `.cursorrules` and `.windsurfrules` is available for editor compatibility.  \n### Mode-Specific Instructions  \nMode-specific instructions can be set in two independent ways that can be used simultaneously:  \n1.  **Using the Prompts Tab:**\n* **Open Tab:** Click the <Codicon name=\"notebook\" /> icon in the Roo Code top menu bar\n* **Select Mode:** Under the Modes heading, click the button for the mode you want to customize\n* **Enter Instructions:** Enter your instructions in the text area under \"Mode-specific Custom Instructions (optional)\"\n* **Save Changes:** Click \"Done\" to save your changes  \n2.  **Using Rule Files:** Create a `.clinerules-[mode]` file in your workspace root (e.g., `.clinerules-code`)  \nWhen both tab instructions and rule files are set for a mode, both sets of instructions will be included in the system prompt.  \n### How Instructions are Combined  \nInstructions are placed in the system prompt in this exact format:  \n```\n====\nUSER'S CUSTOM INSTRUCTIONS\nThe following additional instructions are provided by the user, and should be followed to the best of your ability without interfering with the TOOL USE guidelines.\n[Language Preference (if set)]\n[Global Instructions]\n[Mode-specific Instructions]\n\nRules:\n[.clinerules-{mode} rules]\n[.clinerules rules]\n[.cursorrules rules]\n[.windsurfrules rules]\n```  \n### About Rule Files  \n* **File Location:** All rule files must be placed in the workspace root directory\n* **Empty Files:** Empty or missing rule files are silently skipped\n* **Source Headers:** Each rule file's contents are included with a header indicating its source\n* **Rule Interaction:** Mode-specific rules complement global rules rather than replacing them", "metadata": {"path": "advanced-usage/custom-instructions.md", "name": "custom-instructions.md", "header1": "Custom Instructions", "header2": "Workspace-Level Instructions"}}
{"content": "## Examples of Custom Instructions  \n* \"Always use spaces for indentation, with a width of 4 spaces\"\n* \"Use camelCase for variable names\"\n* \"Write unit tests for all new functions\"\n* \"Explain your reasoning before providing code\"\n* \"Focus on code readability and maintainability\"\n* \"Prioritize using the most common library in the community\"\n* \"When adding new features to websites, ensure they are responsive and accessible\"  \nBy using custom instructions, you can tailor Roo Code's behavior to match your coding style, project requirements, and personal preferences.", "metadata": {"path": "advanced-usage/custom-instructions.md", "name": "custom-instructions.md", "header1": "Custom Instructions", "header2": "Examples of Custom Instructions"}}
{"content": "# Prompt Engineering Tips  \nPrompt engineering is the art of crafting effective instructions for AI models like Roo Code.  Well-written prompts lead to better results, fewer errors, and a more efficient workflow.", "metadata": {"path": "advanced-usage/prompt-engineering.md", "name": "prompt-engineering.md", "header1": "Prompt Engineering Tips"}}
{"content": "## General Principles  \n*   **Be Clear and Specific:** Clearly state what you want Roo Code to do. Avoid ambiguity.\n*   **Bad:** Fix the code.\n*   **Good:** Fix the bug in the `calculateTotal` function that causes it to return incorrect results.  \n*   **Provide Context:** Use [Context Mentions](../basic-usage/context-mentions) to refer to specific files, folders, or problems.\n*   **Good:** `@/src/utils.ts` Refactor the `calculateTotal` function to use async/await.  \n*   **Break Down Tasks:** Divide complex tasks into smaller, well-defined steps.  \n*   **Give Examples:** If you have a specific coding style or pattern in mind, provide examples.  \n*   **Specify Output Format:** If you need the output in a particular format (e.g., JSON, Markdown), specify it in the prompt.  \n*   **Iterate:** Don't be afraid to refine your prompt if the initial results aren't what you expect.", "metadata": {"path": "advanced-usage/prompt-engineering.md", "name": "prompt-engineering.md", "header1": "Prompt Engineering Tips", "header2": "General Principles"}}
{"content": "## Thinking vs. Doing  \nIt's often helpful to guide Roo Code through a \"think-then-do\" process:  \n1.  **Analyze:** Ask Roo Code to analyze the current code, identify problems, or plan the approach.\n2.  **Plan:**  Have Roo Code outline the steps it will take to complete the task.\n3.  **Execute:**  Instruct Roo Code to implement the plan, one step at a time.\n4.  **Review:**  Carefully review the results of each step before proceeding.", "metadata": {"path": "advanced-usage/prompt-engineering.md", "name": "prompt-engineering.md", "header1": "Prompt Engineering Tips", "header2": "Thinking vs. Doing"}}
{"content": "## Using Custom Instructions  \nYou can provide custom instructions to further tailor Roo Code's behavior. There are two types of custom instructions:  \n*   **Global Custom Instructions:** Apply to all modes.\n*   **Mode-Specific Custom Instructions:** Apply only to a specific mode (e.g., Code, Architect, Ask, Debug, or a custom mode).  \nCustom instructions are added to the system prompt, providing persistent guidance to the AI model. You can use these to:  \n*   Enforce coding style guidelines.\n*   Specify preferred libraries or frameworks.\n*   Define project-specific conventions.\n*   Adjust Roo Code's tone or personality.  \nSee the [Custom Instructions](./custom-instructions) section for more details.", "metadata": {"path": "advanced-usage/prompt-engineering.md", "name": "prompt-engineering.md", "header1": "Prompt Engineering Tips", "header2": "Using Custom Instructions"}}
{"content": "## Handling Ambiguity  \nIf your request is ambiguous or lacks sufficient detail, Roo Code might:  \n*   **Make Assumptions:**  It might proceed based on its best guess, which may not be what you intended.\n*   **Ask Follow-Up Questions:** It might use the `ask_followup_question` tool to clarify your request.  \nIt's generally better to provide clear and specific instructions from the start to avoid unnecessary back-and-forth.", "metadata": {"path": "advanced-usage/prompt-engineering.md", "name": "prompt-engineering.md", "header1": "Prompt Engineering Tips", "header2": "Handling Ambiguity"}}
{"content": "## Providing Feedback  \nIf Roo Code doesn't produce the desired results, you can provide feedback by:  \n*   **Rejecting Actions:** Click the \"Reject\" button when Roo Code proposes an action you don't want.\n*   **Providing Explanations:** When rejecting, explain *why* you're rejecting the action.  This helps Roo Code learn from its mistakes.\n*   **Rewording Your Request:** Try rephrasing your initial task or providing more specific instructions.\n*   **Manually Correcting:** If there are a few small issues, you can also directly modify the code before accepting the changes.", "metadata": {"path": "advanced-usage/prompt-engineering.md", "name": "prompt-engineering.md", "header1": "Prompt Engineering Tips", "header2": "Providing Feedback"}}
{"content": "## Examples  \n**Good Prompt:**  \n> `@/src/components/Button.tsx` Refactor the `Button` component to use the `useState` hook instead of the `useReducer` hook.  \n**Bad Prompt:**  \n> Fix the button.  \n**Good Prompt:**  \n> Create a new file named `utils.py` and add a function called `calculate_average` that takes a list of numbers and returns their average.  \n**Bad Prompt:**  \n> Write some Python code.  \n**Good Prompt:**  \n> `@problems` Address all errors and warnings in the current file.  \n**Bad Prompt:**  \n> Fix everything.  \nBy following these tips, you can write effective prompts that get the most out of Roo Code's capabilities.", "metadata": {"path": "advanced-usage/prompt-engineering.md", "name": "prompt-engineering.md", "header1": "Prompt Engineering Tips", "header2": "Examples"}}
{"content": "# Model Context Protocol (MCP)  \nThe Model Context Protocol (MCP) is a standard for extending Roo Code's capabilities by connecting to external tools and services.  MCP servers can provide additional tools and resources that Roo Code can use to accomplish tasks.", "metadata": {"path": "advanced-usage/mcp.md", "name": "mcp.md", "header1": "Model Context Protocol (MCP)"}}
{"content": "## Why Use MCP?  \n*   **Extend Functionality:** Add new capabilities to Roo Code without modifying the core extension.\n*   **Access External Data:** Connect to databases, APIs, or other services.\n*   **Custom Integrations:** Create custom tools tailored to your specific workflow.\n*   **Community Contributions:** Share and use tools developed by the Roo Code community.", "metadata": {"path": "advanced-usage/mcp.md", "name": "mcp.md", "header1": "Model Context Protocol (MCP)", "header2": "Why Use MCP?"}}
{"content": "## MCP Server Status  \nYou can view and manage your MCP server connections by clicking the <Codicon name=\"server\" /> icon in the top navigation bar.", "metadata": {"path": "advanced-usage/mcp.md", "name": "mcp.md", "header1": "Model Context Protocol (MCP)", "header2": "MCP Server Status"}}
{"content": "## Finding and Installing MCP Servers  \nRoo Code does not come with any pre-installed MCP servers.  You'll need to find and install them separately.  \n*   **Community Repositories:**  Check for community-maintained lists of MCP servers.  (Link to a hypothetical community repo/list here)\n*   **GitHub Search:** Search GitHub for \"MCP server\" or \"Model Context Protocol server.\"\n*   **Ask Roo:**  You can ask Roo Code to help you find or even create MCP servers.  \nInstallation typically involves adding the server's configuration to the `cline_mcp_settings.json` file.  See the [Configuration](#configuration) section for details.", "metadata": {"path": "advanced-usage/mcp.md", "name": "mcp.md", "header1": "Model Context Protocol (MCP)", "header2": "Finding and Installing MCP Servers"}}
{"content": "## Using MCP Tools and Resources  \nOnce an MCP server is connected, its tools and resources become available to Roo Code.  \n*   **Tools:**  MCP tools are invoked using the `use_mcp_tool` tool.  You'll need to provide the server name and the tool name.\n*   **Resources:** MCP resources can be accessed using the `access_mcp_resource` tool.  You'll need to provide the server name and the resource URI.  \nRoo Code will prompt you for any required parameters when using these tools.", "metadata": {"path": "advanced-usage/mcp.md", "name": "mcp.md", "header1": "Model Context Protocol (MCP)", "header2": "Using MCP Tools and Resources"}}
{"content": "## Creating Your Own MCP Server  \nYou can create your own MCP server to add custom functionality to Roo Code.  This requires some programming knowledge.  See the [MCP documentation](https://github.com/modelcontextprotocol) for details on how to create an MCP server.", "metadata": {"path": "advanced-usage/mcp.md", "name": "mcp.md", "header1": "Model Context Protocol (MCP)", "header2": "Creating Your Own MCP Server"}}
{"content": "## Configuration  \nMCP server configurations are stored in the `cline_mcp_settings.json` file. You can access it from Roo Code's settings by clicking on \"Edit MCP Settings\", or you can open it from the VS Code command palette with the `Roo Code: Open MCP Config` command.  \nThe file uses a JSON format:  \n```json\n{\n\"mcpServers\": {\n\"server1\": {\n\"command\": \"python\",\n\"args\": [\"/path/to/server.py\"],\n\"env\": {\n\"API_KEY\": \"your_api_key\"\n},\n\"alwaysAllow\": [\"tool1\", \"tool2\"],\n\"disabled\": false\n},\n\"server2\": {\n\"command\": \"node\",\n\"args\": [\"/path/to/server.js\"],\n\"timeout\": 90\n}\n}\n}\n```", "metadata": {"path": "advanced-usage/mcp.md", "name": "mcp.md", "header1": "Model Context Protocol (MCP)", "header2": "Configuration"}}
{"content": "## Disabling MCP Features  \nRoo Code provides two settings to control the use of MCP servers, to help you manage token usage and security:  \n### 1. Disable MCP Servers Entirely  \nIf you don't want to use MCP servers at all, you can disable them completely:  \n1. Open the Roo Code Settings (<Codicon name=\"gear\" />)\n2. Find the \"Enable MCP Servers\" setting\n3. Uncheck the box  \nThis will prevent Roo Code from connecting to any MCP servers, and the `use_mcp_tool` and `access_mcp_resource` tools will not be available. This is the most secure option if you don't intend to use MCP.  \n### 2. Disable MCP Server Creation  \nRoo Code can be asked to assist in creating new MCP servers. This is a powerful feature, but it also consumes more tokens and could potentially introduce security risks if used improperly.  \nTo disable MCP server creation:  \n1. Open the Roo Code Settings (<Codicon name=\"gear\" />)\n2. Find the \"Enable MCP Server Creation\" setting\n3. Uncheck the box  \nWith this option disabled, Roo Code will not attempt to create new MCP servers. You can still use existing, manually configured servers.  \nBy default, both of these options are enabled.", "metadata": {"path": "advanced-usage/mcp.md", "name": "mcp.md", "header1": "Model Context Protocol (MCP)", "header2": "Disabling MCP Features"}}
{"content": "# Rate Limits and Costs  \nUnderstanding and managing API usage is crucial for a smooth and cost-effective experience with Roo Code. This section explains how to track your token usage, costs, and how to configure rate limits.", "metadata": {"path": "advanced-usage/rate-limits-costs.md", "name": "rate-limits-costs.md", "header1": "Rate Limits and Costs"}}
{"content": "## Token Usage  \nRoo Code interacts with AI models using tokens.  Tokens are essentially pieces of words.  The number of tokens used in a request and response affects both the processing time and the cost.  \n*   **Input Tokens:** These are the tokens in your prompt, including the system prompt, your instructions, and any context provided (e.g., file contents).\n*   **Output Tokens:** These are the tokens generated by the AI model in its response.  \nYou can see the number of input and output tokens used for each interaction in the chat history.", "metadata": {"path": "advanced-usage/rate-limits-costs.md", "name": "rate-limits-costs.md", "header1": "Rate Limits and Costs", "header2": "Token Usage"}}
{"content": "## Cost Calculation  \nMost AI providers charge based on the number of tokens used.  Pricing varies depending on the provider and the specific model.  \nRoo Code automatically calculates the estimated cost of each API request based on the configured model's pricing.  This cost is displayed in the chat history, next to the token usage.  \n**Note:**  \n*   The cost calculation is an *estimate*.  The actual cost may vary slightly depending on the provider's billing practices.\n*   Some providers may offer free tiers or credits.  Check your provider's documentation for details.\n*   Some providers offer prompt caching which greatly lowers cost.", "metadata": {"path": "advanced-usage/rate-limits-costs.md", "name": "rate-limits-costs.md", "header1": "Rate Limits and Costs", "header2": "Cost Calculation"}}
{"content": "## Configuring Rate Limits  \nTo prevent accidental overuse of the API and to help you manage costs, Roo Code allows you to set a rate limit.  The rate limit specifies the minimum time (in seconds) between API requests.  \n**How to configure:**  \n1.  Open the Roo Code settings (<Codicon name=\"rocket\" /> icon in the top right corner).\n2.  Go to the \"Advanced Settings\" section.\n3.  Find the \"Rate Limit (seconds)\" setting.\n4.  Enter the desired delay in seconds.  A value of 0 disables rate limiting.  \n**Example:**  \nIf you set the rate limit to 10 seconds, Roo Code will wait at least 10 seconds after one API request completes before sending the next one.", "metadata": {"path": "advanced-usage/rate-limits-costs.md", "name": "rate-limits-costs.md", "header1": "Rate Limits and Costs", "header2": "Configuring Rate Limits"}}
{"content": "## Tips for Optimizing Token Usage  \n*   **Be Concise:**  Use clear and concise language in your prompts. Avoid unnecessary words or details.\n*   **Provide Only Relevant Context:** Use context mentions (`@file.ts`, `@folder/`) selectively.  Only include the files that are directly relevant to the task.\n*   **Break Down Tasks:** Divide large tasks into smaller, more focused sub-tasks.\n*   **Use Custom Instructions:**  Provide custom instructions to guide Roo Code's behavior and reduce the need for lengthy explanations in each prompt.\n*   **Choose the Right Model:**  Some models are more cost-effective than others.  Consider using a smaller, faster model for tasks that don't require the full power of a larger model.\n*   **Use Modes:** Different modes can access different tools, for example `Architect` can't modify code, which makes it a safe choice when analyzing a complex codebase, without worrying about accidentally allowing expensive operations.\n*   **Disable MCP If Not Used:** If you're not using MCP (Model Context Protocol) features, consider [disabling it in the MCP settings](./mcp#disabling-mcp-features) to significantly reduce the size of the system prompt and save tokens.  \nBy understanding and managing your API usage, you can use Roo Code effectively and efficiently.", "metadata": {"path": "advanced-usage/rate-limits-costs.md", "name": "rate-limits-costs.md", "header1": "Rate Limits and Costs", "header2": "Tips for Optimizing Token Usage"}}
{"content": "---\nsidebar_label: Your First Task\n---", "metadata": {"path": "getting-started/your-first-task.md", "name": "your-first-task.md"}}
{"content": "# Starting Your First Task with Roo Code  \nNow that you've [configured your AI provider and model](./connecting-api-provider), you're ready to start using Roo Code! This guide will walk you through your first interaction.", "metadata": {"path": "getting-started/your-first-task.md", "name": "your-first-task.md", "header1": "Starting Your First Task with Roo Code"}}
{"content": "## Step 1: Open the Roo Code Panel  \nIf the Roo Code panel isn't already visible, click the Roo Code icon (<Codicon name=\"rocket\" />) in the VS Code Activity Bar (the vertical bar on the side of the window). This will open the Roo Code chat interface.  If you don't see the icon, make sure the extension is installed and enabled.", "metadata": {"path": "getting-started/your-first-task.md", "name": "your-first-task.md", "header1": "Starting Your First Task with Roo Code", "header2": "Step 1: Open the Roo Code Panel"}}
{"content": "## Step 2: Type Your Task  \nIn the Roo Code chat box (at the bottom of the panel), type a description of what you want Roo Code to do.  Be clear and concise.  Here are some examples of good initial tasks:  \n*   \"Create a file named `hello.txt` containing 'Hello, world!'.\"\n*   \"Write a Python function that adds two numbers.\"\n*    \"Create an html file for a simple website with the title 'Roo test'\"  \nYou don't need to use any special commands or syntax at this point.  Just write your request in plain English.", "metadata": {"path": "getting-started/your-first-task.md", "name": "your-first-task.md", "header1": "Starting Your First Task with Roo Code", "header2": "Step 2: Type Your Task"}}
{"content": "## Step 3: Send Your Task  \nPress Enter, or click the Send icon (<Codicon name=\"send\" />) to the right of the input box.", "metadata": {"path": "getting-started/your-first-task.md", "name": "your-first-task.md", "header1": "Starting Your First Task with Roo Code", "header2": "Step 3: Send Your Task"}}
{"content": "## Step 4: Review and Approve Actions  \nRoo Code will analyze your request and propose a series of actions.  These actions might include:  \n*   **Reading files:** Roo Code will show you the contents of files it wants to read.\n*   **Writing to files:** Roo Code will show you a diff (a visual representation of the changes) of any proposed file modifications.  You'll see added lines in green and removed lines in red.\n*   **Executing commands:** Roo Code will show you the exact command it wants to run in your terminal.\n*   **Using the Browser:** Roo Code will show you the action it's going to perform (click, type, etc)\n* **Asking a question:** If Roo Code is not sure on how to proceed, it will ask you follow-up questions.  \n**You will have the opportunity to approve or reject each action.**  Roo Code will not perform any action without your explicit permission (unless you've enabled auto-approval in the settings).  \n*   **Approve:** If you're happy with the proposed action, click the \"Approve\" button (or similar).\n*   **Reject:** If you don't want Roo Code to perform the action, click the \"Reject\" button. You can provide feedback to help Roo Code understand why you rejected the action.", "metadata": {"path": "getting-started/your-first-task.md", "name": "your-first-task.md", "header1": "Starting Your First Task with Roo Code", "header2": "Step 4: Review and Approve Actions"}}
{"content": "## Step 5: Iterate  \nRoo Code works iteratively.  After each action, it will wait for your feedback and then propose the next step.  Continue reviewing and approving (or rejecting) actions until the task is complete.", "metadata": {"path": "getting-started/your-first-task.md", "name": "your-first-task.md", "header1": "Starting Your First Task with Roo Code", "header2": "Step 5: Iterate"}}
{"content": "---\nsidebar_label: Installing Roo Code\n---", "metadata": {"path": "getting-started/installing.md", "name": "installing.md"}}
{"content": "# Installing Roo Code  \nRoo Code is a VS Code extension that brings AI-powered coding assistance to your editor.  There are three main ways to install it:  \n1.  **From the VS Code Marketplace (Recommended)**\n2.  **From the Open VSX Registry**\n3.  **From a VSIX file (Advanced)**", "metadata": {"path": "getting-started/installing.md", "name": "installing.md", "header1": "Installing Roo Code"}}
{"content": "## 1. Installation from the VS Code Marketplace  \nThis is the easiest and recommended method for most users.  \n1.  **Open VS Code.**\n2.  **Open the Extensions View:**\n*   Click the Extensions icon in the Activity Bar on the side of VS Code.  (It looks like four squares, with one detached.)\n*   Or, use the keyboard shortcut: `Ctrl+Shift+X` (Windows/Linux) or `Cmd+Shift+X` (macOS).\n3.  **Search for Roo Code:** In the Extensions view search box, type `Roo Code`.\n4.  **Install:** Find \"Roo Code\" in the search results (by RooVeterinaryInc). Click the **Install** button.\n5.  **Reload (if required):**  VS Code may prompt you to reload.  If so, click the **Reload** button.  \nOnce installed, you'll see the Roo Code icon (<Codicon name=\"rocket\" />) in the Activity Bar.  Click it to open the Roo Code panel.", "metadata": {"path": "getting-started/installing.md", "name": "installing.md", "header1": "Installing Roo Code", "header2": "1. Installation from the VS Code Marketplace"}}
{"content": "## 2. Installation from the Open VSX Registry  \nIf you're using a VS Code-compatible editor that doesn't have access to the VS Code Marketplace (like VSCodium), you can install Roo Code from the Open VSX Registry.  \n1.  **Open your editor.**\n2.  **Open the Extensions View.**\n3.  **Search for Roo Code:** Type `Roo Code` in the Extensions view search box.\n4.  **Install:** Find \"Roo Code\" in the search results (by RooVeterinaryInc). Click the **Install** button.\n5.  **Reload (if required):** Your editor may prompt you to reload. If so, click the reload button.", "metadata": {"path": "getting-started/installing.md", "name": "installing.md", "header1": "Installing Roo Code", "header2": "2. Installation from the Open VSX Registry"}}
{"content": "## 3. Installation from a VSIX File (Advanced)  \nThis method is useful if you're developing Roo Code, testing a specific build, or need to install it offline.  \n1.  **Download the VSIX file:**\n*   **Releases:**  You can find official releases on the [Roo Code GitHub Releases page](https://github.com/RooVetGit/Roo-Code/releases).  Download the `.vsix` file from the latest release.\n*   **Development Builds:** If you're building the extension yourself, the `.vsix` file is located in the `bin/` directory after running `npm run package`.  \n2.  **Open VS Code.**\n3.  **Open the Extensions View.**\n4.  **Install from VSIX:**\n*   Click the **\"...\"** (Views and More Actions...) menu in the top-right corner of the Extensions view.\n*   Select **\"Install from VSIX...\"**\n*   Browse to the downloaded `.vsix` file and select it.\n5.  **Reload (if required):**  VS Code may prompt you to reload.  If so, click the **Reload** button.", "metadata": {"path": "getting-started/installing.md", "name": "installing.md", "header1": "Installing Roo Code", "header2": "3. Installation from a VSIX File (Advanced)"}}
{"content": "## Troubleshooting Installation  \n*   **Extension Doesn't Appear:**\n*   Make sure you've restarted VS Code after installation.\n*   Check the Extensions view to see if Roo Code is listed and enabled.\n*   Try disabling and re-enabling the extension.\n*   Check for any error messages in the VS Code Output panel (View -> Output, then select \"Roo Code\" from the dropdown).\n*   **Marketplace Issues:**\n*   If you're having trouble with the VS Code Marketplace, try installing from a VSIX file (see instructions above).\n*   Ensure you have a stable internet connection.\n* **Compatibility:** Roo Code requires VS Code version 1.84.0 or later.  \nIf you continue to experience problems, please visit our [GitHub Issues page](https://github.com/RooVetGit/Roo-Code/issues) or [Reddit community](https://www.reddit.com/r/RooCode) to report the issue or ask for help.", "metadata": {"path": "getting-started/installing.md", "name": "installing.md", "header1": "Installing Roo Code", "header2": "Troubleshooting Installation"}}
{"content": "---\nsidebar_label: Connecting To A Provider\n---", "metadata": {"path": "getting-started/connecting-api-provider.md", "name": "connecting-api-provider.md"}}
{"content": "# Connecting Your First AI Provider  \nTo get started, you'll need to connect Roo Code to an AI model provider. We recommend starting with one of these options, which all offer access to Anthropic's powerful **Claude 3.5 Sonnet** model:  \n1.  **OpenRouter (Recommended):** A platform that provides access to multiple AI models, including Claude 3.5 Sonnet. This is often the easiest option for getting started.  \n2.  **Anthropic:** Direct access to Claude models from Anthropic. Requires applying for API access, and may be rate limited depending on your tier.  \nChoose one of these options and follow the instructions below to obtain an API key.", "metadata": {"path": "getting-started/connecting-api-provider.md", "name": "connecting-api-provider.md", "header1": "Connecting Your First AI Provider"}}
{"content": "## Getting Your API Key  \n### Option 1: OpenRouter  \n1.  **Go to the OpenRouter website:** [https://openrouter.ai/](https://openrouter.ai/)\n2.  **Sign in** with your Google or GitHub account.\n3.  **Get an API Key:** Go to the [keys page](https://openrouter.ai/keys) and create a key.  Copy the key.  \n### Option 2: Anthropic  \n1.  **Go to the Anthropic Console:** [https://console.anthropic.com/](https://console.anthropic.com/)\n2.  **Sign up** for an account or log in.\n3.  **Create an API Key:** Go to the API keys page (you may need to navigate through the dashboard) and create a new key.  **Important:** Copy the key immediately, as you won't be able to see it again.", "metadata": {"path": "getting-started/connecting-api-provider.md", "name": "connecting-api-provider.md", "header1": "Connecting Your First AI Provider", "header2": "Getting Your API Key"}}
{"content": "## Configuring Roo Code in VS Code  \n1.  **Open the Roo Code Sidebar:** Click the Roo Code icon (<Codicon name=\"rocket\" />) in the VS Code Activity Bar.  You should see the welcome screen.  \n2.  **Select your API Provider:** In the \"API Provider\" dropdown, choose your API provider.  \n3.  **Enter your API Key:** Paste your API key into the \"API Key\" field.  \n4. **Select your Model:**\n* If you're using **OpenRouter**, select `anthropic/claude-3.5-sonnet:beta`.\n* If you're using **Anthropic**, select `claude-3-5-sonnet-20241022`.  \n5.  **Click \"Let's go!\":**  Roo Code will save your settings, and you'll be ready to start coding!", "metadata": {"path": "getting-started/connecting-api-provider.md", "name": "connecting-api-provider.md", "header1": "Connecting Your First AI Provider", "header2": "Configuring Roo Code in VS Code"}}
